
PROJECT_A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005188  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  0800534c  0800534c  0001534c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800541c  0800541c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800541c  0800541c  0001541c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005424  08005424  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005424  08005424  00015424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005428  08005428  00015428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800542c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  2000000c  08005438  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000218  08005438  00020218  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000101f1  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000210b  00000000  00000000  00030270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ed0  00000000  00000000  00032380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b9e  00000000  00000000  00033250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023d33  00000000  00000000  00033dee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012dbc  00000000  00000000  00057b21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0448  00000000  00000000  0006a8dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003f10  00000000  00000000  0014ad28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0014ec38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08005334 	.word	0x08005334

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08005334 	.word	0x08005334

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b088      	sub	sp, #32
 8000504:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000506:	f000 fde1 	bl	80010cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050a:	f000 f869 	bl	80005e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050e:	f000 fa3d 	bl	800098c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000512:	f000 fa09 	bl	8000928 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000516:	f000 f8d3 	bl	80006c0 <MX_ADC1_Init>
  MX_I2C1_Init();
 800051a:	f000 f923 	bl	8000764 <MX_I2C1_Init>
  MX_SPI2_Init();
 800051e:	f000 f9a3 	bl	8000868 <MX_SPI2_Init>
  MX_USB_OTG_HS_USB_Init();
 8000522:	f000 fa2b 	bl	800097c <MX_USB_OTG_HS_USB_Init>
  MX_UART5_Init();
 8000526:	f000 f9d5 	bl	80008d4 <MX_UART5_Init>
  MX_I2S3_Init();
 800052a:	f000 f949 	bl	80007c0 <MX_I2S3_Init>
  MX_RTC_Init();
 800052e:	f000 f975 	bl	800081c <MX_RTC_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000532:	2120      	movs	r1, #32
 8000534:	4824      	ldr	r0, [pc, #144]	; (80005c8 <main+0xc8>)
 8000536:	f001 fd02 	bl	8001f3e <HAL_GPIO_TogglePin>
	   HAL_Delay(1000);
 800053a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800053e:	f000 fe37 	bl	80011b0 <HAL_Delay>

	   // I2C communication example
	          uint8_t i2cData = 0x55;
 8000542:	2355      	movs	r3, #85	; 0x55
 8000544:	74fb      	strb	r3, [r7, #19]
	          HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)0xA0, &i2cData, 1, HAL_MAX_DELAY);
 8000546:	f107 0213 	add.w	r2, r7, #19
 800054a:	f04f 33ff 	mov.w	r3, #4294967295
 800054e:	9300      	str	r3, [sp, #0]
 8000550:	2301      	movs	r3, #1
 8000552:	21a0      	movs	r1, #160	; 0xa0
 8000554:	481d      	ldr	r0, [pc, #116]	; (80005cc <main+0xcc>)
 8000556:	f001 fe51 	bl	80021fc <HAL_I2C_Master_Transmit>
	          HAL_Delay(8000);
 800055a:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 800055e:	f000 fe27 	bl	80011b0 <HAL_Delay>

	          // SPI communication example
	          uint8_t spiData = 0xAA;
 8000562:	23aa      	movs	r3, #170	; 0xaa
 8000564:	74bb      	strb	r3, [r7, #18]
	          HAL_SPI_Transmit(&hspi2, &spiData, 1, HAL_MAX_DELAY);
 8000566:	f107 0112 	add.w	r1, r7, #18
 800056a:	f04f 33ff 	mov.w	r3, #4294967295
 800056e:	2201      	movs	r2, #1
 8000570:	4817      	ldr	r0, [pc, #92]	; (80005d0 <main+0xd0>)
 8000572:	f004 f886 	bl	8004682 <HAL_SPI_Transmit>
	          HAL_Delay(6000);
 8000576:	f241 7070 	movw	r0, #6000	; 0x1770
 800057a:	f000 fe19 	bl	80011b0 <HAL_Delay>

	          // USART communication example
	          char usartData[] = "Hello USART";
 800057e:	4a15      	ldr	r2, [pc, #84]	; (80005d4 <main+0xd4>)
 8000580:	1d3b      	adds	r3, r7, #4
 8000582:	ca07      	ldmia	r2, {r0, r1, r2}
 8000584:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	          HAL_UART_Transmit(&huart2, (uint8_t*)usartData, sizeof(usartData) - 1, HAL_MAX_DELAY);
 8000588:	1d39      	adds	r1, r7, #4
 800058a:	f04f 33ff 	mov.w	r3, #4294967295
 800058e:	220b      	movs	r2, #11
 8000590:	4811      	ldr	r0, [pc, #68]	; (80005d8 <main+0xd8>)
 8000592:	f004 fae7 	bl	8004b64 <HAL_UART_Transmit>
	          HAL_Delay(4000);
 8000596:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800059a:	f000 fe09 	bl	80011b0 <HAL_Delay>

	          // ADC reading example
	          uint32_t adcValue;
	          HAL_ADC_Start(&hadc1);
 800059e:	480f      	ldr	r0, [pc, #60]	; (80005dc <main+0xdc>)
 80005a0:	f000 fe6e 	bl	8001280 <HAL_ADC_Start>
	          HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80005a4:	f04f 31ff 	mov.w	r1, #4294967295
 80005a8:	480c      	ldr	r0, [pc, #48]	; (80005dc <main+0xdc>)
 80005aa:	f000 ff6e 	bl	800148a <HAL_ADC_PollForConversion>
	          adcValue = HAL_ADC_GetValue(&hadc1);
 80005ae:	480b      	ldr	r0, [pc, #44]	; (80005dc <main+0xdc>)
 80005b0:	f000 fff6 	bl	80015a0 <HAL_ADC_GetValue>
 80005b4:	6178      	str	r0, [r7, #20]
	          HAL_ADC_Stop(&hadc1);
 80005b6:	4809      	ldr	r0, [pc, #36]	; (80005dc <main+0xdc>)
 80005b8:	f000 ff34 	bl	8001424 <HAL_ADC_Stop>
	          HAL_Delay(2000);
 80005bc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005c0:	f000 fdf6 	bl	80011b0 <HAL_Delay>
  {
 80005c4:	e7b5      	b.n	8000532 <main+0x32>
 80005c6:	bf00      	nop
 80005c8:	40020000 	.word	0x40020000
 80005cc:	20000070 	.word	0x20000070
 80005d0:	2000012c 	.word	0x2000012c
 80005d4:	080053f8 	.word	0x080053f8
 80005d8:	200001cc 	.word	0x200001cc
 80005dc:	20000028 	.word	0x20000028

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b094      	sub	sp, #80	; 0x50
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 031c 	add.w	r3, r7, #28
 80005ea:	2234      	movs	r2, #52	; 0x34
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f004 fe74 	bl	80052dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	f107 0308 	add.w	r3, r7, #8
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000604:	2300      	movs	r3, #0
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	4b2b      	ldr	r3, [pc, #172]	; (80006b8 <SystemClock_Config+0xd8>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060c:	4a2a      	ldr	r2, [pc, #168]	; (80006b8 <SystemClock_Config+0xd8>)
 800060e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000612:	6413      	str	r3, [r2, #64]	; 0x40
 8000614:	4b28      	ldr	r3, [pc, #160]	; (80006b8 <SystemClock_Config+0xd8>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000620:	2300      	movs	r3, #0
 8000622:	603b      	str	r3, [r7, #0]
 8000624:	4b25      	ldr	r3, [pc, #148]	; (80006bc <SystemClock_Config+0xdc>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800062c:	4a23      	ldr	r2, [pc, #140]	; (80006bc <SystemClock_Config+0xdc>)
 800062e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000632:	6013      	str	r3, [r2, #0]
 8000634:	4b21      	ldr	r3, [pc, #132]	; (80006bc <SystemClock_Config+0xdc>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800063c:	603b      	str	r3, [r7, #0]
 800063e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000640:	2309      	movs	r3, #9
 8000642:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000644:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000648:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800064a:	2301      	movs	r3, #1
 800064c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800064e:	2301      	movs	r3, #1
 8000650:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000652:	2302      	movs	r3, #2
 8000654:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000656:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800065a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800065c:	2304      	movs	r3, #4
 800065e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000660:	2348      	movs	r3, #72	; 0x48
 8000662:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000664:	2302      	movs	r3, #2
 8000666:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000668:	2303      	movs	r3, #3
 800066a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800066c:	2302      	movs	r3, #2
 800066e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000670:	f107 031c 	add.w	r3, r7, #28
 8000674:	4618      	mov	r0, r3
 8000676:	f003 fbd7 	bl	8003e28 <HAL_RCC_OscConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000680:	f000 fa14 	bl	8000aac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000684:	230f      	movs	r3, #15
 8000686:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000688:	2302      	movs	r3, #2
 800068a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000690:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000694:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800069a:	f107 0308 	add.w	r3, r7, #8
 800069e:	2102      	movs	r1, #2
 80006a0:	4618      	mov	r0, r3
 80006a2:	f002 fb03 	bl	8002cac <HAL_RCC_ClockConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80006ac:	f000 f9fe 	bl	8000aac <Error_Handler>
  }
}
 80006b0:	bf00      	nop
 80006b2:	3750      	adds	r7, #80	; 0x50
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40007000 	.word	0x40007000

080006c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006c6:	463b      	mov	r3, r7
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006d2:	4b21      	ldr	r3, [pc, #132]	; (8000758 <MX_ADC1_Init+0x98>)
 80006d4:	4a21      	ldr	r2, [pc, #132]	; (800075c <MX_ADC1_Init+0x9c>)
 80006d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006d8:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <MX_ADC1_Init+0x98>)
 80006da:	2200      	movs	r2, #0
 80006dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006de:	4b1e      	ldr	r3, [pc, #120]	; (8000758 <MX_ADC1_Init+0x98>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006e4:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <MX_ADC1_Init+0x98>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006ea:	4b1b      	ldr	r3, [pc, #108]	; (8000758 <MX_ADC1_Init+0x98>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006f0:	4b19      	ldr	r3, [pc, #100]	; (8000758 <MX_ADC1_Init+0x98>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006f8:	4b17      	ldr	r3, [pc, #92]	; (8000758 <MX_ADC1_Init+0x98>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006fe:	4b16      	ldr	r3, [pc, #88]	; (8000758 <MX_ADC1_Init+0x98>)
 8000700:	4a17      	ldr	r2, [pc, #92]	; (8000760 <MX_ADC1_Init+0xa0>)
 8000702:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000704:	4b14      	ldr	r3, [pc, #80]	; (8000758 <MX_ADC1_Init+0x98>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800070a:	4b13      	ldr	r3, [pc, #76]	; (8000758 <MX_ADC1_Init+0x98>)
 800070c:	2201      	movs	r2, #1
 800070e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000710:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_ADC1_Init+0x98>)
 8000712:	2200      	movs	r2, #0
 8000714:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000718:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <MX_ADC1_Init+0x98>)
 800071a:	2201      	movs	r2, #1
 800071c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800071e:	480e      	ldr	r0, [pc, #56]	; (8000758 <MX_ADC1_Init+0x98>)
 8000720:	f000 fd6a 	bl	80011f8 <HAL_ADC_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800072a:	f000 f9bf 	bl	8000aac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800072e:	2300      	movs	r3, #0
 8000730:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000732:	2301      	movs	r3, #1
 8000734:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000736:	2300      	movs	r3, #0
 8000738:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800073a:	463b      	mov	r3, r7
 800073c:	4619      	mov	r1, r3
 800073e:	4806      	ldr	r0, [pc, #24]	; (8000758 <MX_ADC1_Init+0x98>)
 8000740:	f000 ff3c 	bl	80015bc <HAL_ADC_ConfigChannel>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800074a:	f000 f9af 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	3710      	adds	r7, #16
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000028 	.word	0x20000028
 800075c:	40012000 	.word	0x40012000
 8000760:	0f000001 	.word	0x0f000001

08000764 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000768:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <MX_I2C1_Init+0x50>)
 800076a:	4a13      	ldr	r2, [pc, #76]	; (80007b8 <MX_I2C1_Init+0x54>)
 800076c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_I2C1_Init+0x50>)
 8000770:	4a12      	ldr	r2, [pc, #72]	; (80007bc <MX_I2C1_Init+0x58>)
 8000772:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000774:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <MX_I2C1_Init+0x50>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_I2C1_Init+0x50>)
 800077c:	2200      	movs	r2, #0
 800077e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <MX_I2C1_Init+0x50>)
 8000782:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000786:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000788:	4b0a      	ldr	r3, [pc, #40]	; (80007b4 <MX_I2C1_Init+0x50>)
 800078a:	2200      	movs	r2, #0
 800078c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800078e:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_I2C1_Init+0x50>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000794:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <MX_I2C1_Init+0x50>)
 8000796:	2200      	movs	r2, #0
 8000798:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800079a:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_I2C1_Init+0x50>)
 800079c:	2200      	movs	r2, #0
 800079e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007a0:	4804      	ldr	r0, [pc, #16]	; (80007b4 <MX_I2C1_Init+0x50>)
 80007a2:	f001 fbe7 	bl	8001f74 <HAL_I2C_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007ac:	f000 f97e 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000070 	.word	0x20000070
 80007b8:	40005400 	.word	0x40005400
 80007bc:	000186a0 	.word	0x000186a0

080007c0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007c4:	4b13      	ldr	r3, [pc, #76]	; (8000814 <MX_I2S3_Init+0x54>)
 80007c6:	4a14      	ldr	r2, [pc, #80]	; (8000818 <MX_I2S3_Init+0x58>)
 80007c8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007ca:	4b12      	ldr	r3, [pc, #72]	; (8000814 <MX_I2S3_Init+0x54>)
 80007cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007d0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007d2:	4b10      	ldr	r3, [pc, #64]	; (8000814 <MX_I2S3_Init+0x54>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007d8:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <MX_I2S3_Init+0x54>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80007de:	4b0d      	ldr	r3, [pc, #52]	; (8000814 <MX_I2S3_Init+0x54>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 80007e4:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <MX_I2S3_Init+0x54>)
 80007e6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80007ea:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007ec:	4b09      	ldr	r3, [pc, #36]	; (8000814 <MX_I2S3_Init+0x54>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007f2:	4b08      	ldr	r3, [pc, #32]	; (8000814 <MX_I2S3_Init+0x54>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <MX_I2S3_Init+0x54>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007fe:	4805      	ldr	r0, [pc, #20]	; (8000814 <MX_I2S3_Init+0x54>)
 8000800:	f002 f856 	bl	80028b0 <HAL_I2S_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800080a:	f000 f94f 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	200000c4 	.word	0x200000c4
 8000818:	40003c00 	.word	0x40003c00

0800081c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <MX_RTC_Init+0x44>)
 8000822:	4a10      	ldr	r2, [pc, #64]	; (8000864 <MX_RTC_Init+0x48>)
 8000824:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <MX_RTC_Init+0x44>)
 8000828:	2200      	movs	r2, #0
 800082a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <MX_RTC_Init+0x44>)
 800082e:	227f      	movs	r2, #127	; 0x7f
 8000830:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <MX_RTC_Init+0x44>)
 8000834:	22ff      	movs	r2, #255	; 0xff
 8000836:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000838:	4b09      	ldr	r3, [pc, #36]	; (8000860 <MX_RTC_Init+0x44>)
 800083a:	2200      	movs	r2, #0
 800083c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800083e:	4b08      	ldr	r3, [pc, #32]	; (8000860 <MX_RTC_Init+0x44>)
 8000840:	2200      	movs	r2, #0
 8000842:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <MX_RTC_Init+0x44>)
 8000846:	2200      	movs	r2, #0
 8000848:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800084a:	4805      	ldr	r0, [pc, #20]	; (8000860 <MX_RTC_Init+0x44>)
 800084c:	f003 fd8a 	bl	8004364 <HAL_RTC_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000856:	f000 f929 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	2000010c 	.word	0x2000010c
 8000864:	40002800 	.word	0x40002800

08000868 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800086c:	4b17      	ldr	r3, [pc, #92]	; (80008cc <MX_SPI2_Init+0x64>)
 800086e:	4a18      	ldr	r2, [pc, #96]	; (80008d0 <MX_SPI2_Init+0x68>)
 8000870:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000872:	4b16      	ldr	r3, [pc, #88]	; (80008cc <MX_SPI2_Init+0x64>)
 8000874:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000878:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800087a:	4b14      	ldr	r3, [pc, #80]	; (80008cc <MX_SPI2_Init+0x64>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000880:	4b12      	ldr	r3, [pc, #72]	; (80008cc <MX_SPI2_Init+0x64>)
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000886:	4b11      	ldr	r3, [pc, #68]	; (80008cc <MX_SPI2_Init+0x64>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800088c:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <MX_SPI2_Init+0x64>)
 800088e:	2200      	movs	r2, #0
 8000890:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000892:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <MX_SPI2_Init+0x64>)
 8000894:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000898:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800089a:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <MX_SPI2_Init+0x64>)
 800089c:	2200      	movs	r2, #0
 800089e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008a0:	4b0a      	ldr	r3, [pc, #40]	; (80008cc <MX_SPI2_Init+0x64>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008a6:	4b09      	ldr	r3, [pc, #36]	; (80008cc <MX_SPI2_Init+0x64>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008ac:	4b07      	ldr	r3, [pc, #28]	; (80008cc <MX_SPI2_Init+0x64>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80008b2:	4b06      	ldr	r3, [pc, #24]	; (80008cc <MX_SPI2_Init+0x64>)
 80008b4:	220a      	movs	r2, #10
 80008b6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008b8:	4804      	ldr	r0, [pc, #16]	; (80008cc <MX_SPI2_Init+0x64>)
 80008ba:	f003 fe59 	bl	8004570 <HAL_SPI_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80008c4:	f000 f8f2 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	2000012c 	.word	0x2000012c
 80008d0:	40003800 	.word	0x40003800

080008d4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80008d8:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_UART5_Init+0x4c>)
 80008da:	4a12      	ldr	r2, [pc, #72]	; (8000924 <MX_UART5_Init+0x50>)
 80008dc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80008de:	4b10      	ldr	r3, [pc, #64]	; (8000920 <MX_UART5_Init+0x4c>)
 80008e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <MX_UART5_Init+0x4c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <MX_UART5_Init+0x4c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <MX_UART5_Init+0x4c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80008f8:	4b09      	ldr	r3, [pc, #36]	; (8000920 <MX_UART5_Init+0x4c>)
 80008fa:	220c      	movs	r2, #12
 80008fc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fe:	4b08      	ldr	r3, [pc, #32]	; (8000920 <MX_UART5_Init+0x4c>)
 8000900:	2200      	movs	r2, #0
 8000902:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <MX_UART5_Init+0x4c>)
 8000906:	2200      	movs	r2, #0
 8000908:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <MX_UART5_Init+0x4c>)
 800090c:	f004 f8da 	bl	8004ac4 <HAL_UART_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000916:	f000 f8c9 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000184 	.word	0x20000184
 8000924:	40005000 	.word	0x40005000

08000928 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800092c:	4b11      	ldr	r3, [pc, #68]	; (8000974 <MX_USART2_UART_Init+0x4c>)
 800092e:	4a12      	ldr	r2, [pc, #72]	; (8000978 <MX_USART2_UART_Init+0x50>)
 8000930:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000932:	4b10      	ldr	r3, [pc, #64]	; (8000974 <MX_USART2_UART_Init+0x4c>)
 8000934:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000938:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <MX_USART2_UART_Init+0x4c>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <MX_USART2_UART_Init+0x4c>)
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000946:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <MX_USART2_UART_Init+0x4c>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800094c:	4b09      	ldr	r3, [pc, #36]	; (8000974 <MX_USART2_UART_Init+0x4c>)
 800094e:	220c      	movs	r2, #12
 8000950:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000952:	4b08      	ldr	r3, [pc, #32]	; (8000974 <MX_USART2_UART_Init+0x4c>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <MX_USART2_UART_Init+0x4c>)
 800095a:	2200      	movs	r2, #0
 800095c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800095e:	4805      	ldr	r0, [pc, #20]	; (8000974 <MX_USART2_UART_Init+0x4c>)
 8000960:	f004 f8b0 	bl	8004ac4 <HAL_UART_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800096a:	f000 f89f 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	200001cc 	.word	0x200001cc
 8000978:	40004400 	.word	0x40004400

0800097c <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
	...

0800098c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08a      	sub	sp, #40	; 0x28
 8000990:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000992:	f107 0314 	add.w	r3, r7, #20
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
 80009a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	613b      	str	r3, [r7, #16]
 80009a6:	4b3d      	ldr	r3, [pc, #244]	; (8000a9c <MX_GPIO_Init+0x110>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a3c      	ldr	r2, [pc, #240]	; (8000a9c <MX_GPIO_Init+0x110>)
 80009ac:	f043 0304 	orr.w	r3, r3, #4
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b3a      	ldr	r3, [pc, #232]	; (8000a9c <MX_GPIO_Init+0x110>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0304 	and.w	r3, r3, #4
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	4b36      	ldr	r3, [pc, #216]	; (8000a9c <MX_GPIO_Init+0x110>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a35      	ldr	r2, [pc, #212]	; (8000a9c <MX_GPIO_Init+0x110>)
 80009c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b33      	ldr	r3, [pc, #204]	; (8000a9c <MX_GPIO_Init+0x110>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	60bb      	str	r3, [r7, #8]
 80009de:	4b2f      	ldr	r3, [pc, #188]	; (8000a9c <MX_GPIO_Init+0x110>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a2e      	ldr	r2, [pc, #184]	; (8000a9c <MX_GPIO_Init+0x110>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b2c      	ldr	r3, [pc, #176]	; (8000a9c <MX_GPIO_Init+0x110>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	4b28      	ldr	r3, [pc, #160]	; (8000a9c <MX_GPIO_Init+0x110>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a27      	ldr	r2, [pc, #156]	; (8000a9c <MX_GPIO_Init+0x110>)
 8000a00:	f043 0302 	orr.w	r3, r3, #2
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b25      	ldr	r3, [pc, #148]	; (8000a9c <MX_GPIO_Init+0x110>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0302 	and.w	r3, r3, #2
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	603b      	str	r3, [r7, #0]
 8000a16:	4b21      	ldr	r3, [pc, #132]	; (8000a9c <MX_GPIO_Init+0x110>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a20      	ldr	r2, [pc, #128]	; (8000a9c <MX_GPIO_Init+0x110>)
 8000a1c:	f043 0308 	orr.w	r3, r3, #8
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b1e      	ldr	r3, [pc, #120]	; (8000a9c <MX_GPIO_Init+0x110>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0308 	and.w	r3, r3, #8
 8000a2a:	603b      	str	r3, [r7, #0]
 8000a2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	21e0      	movs	r1, #224	; 0xe0
 8000a32:	481b      	ldr	r0, [pc, #108]	; (8000aa0 <MX_GPIO_Init+0x114>)
 8000a34:	f001 fa6a 	bl	8001f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a3e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4815      	ldr	r0, [pc, #84]	; (8000aa4 <MX_GPIO_Init+0x118>)
 8000a50:	f001 f8c8 	bl	8001be4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA7 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7;
 8000a54:	23e0      	movs	r3, #224	; 0xe0
 8000a56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a60:	2300      	movs	r3, #0
 8000a62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	4619      	mov	r1, r3
 8000a6a:	480d      	ldr	r0, [pc, #52]	; (8000aa0 <MX_GPIO_Init+0x114>)
 8000a6c:	f001 f8ba 	bl	8001be4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 8000a70:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a76:	2302      	movs	r3, #2
 8000a78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7e:	2303      	movs	r3, #3
 8000a80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000a82:	230c      	movs	r3, #12
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4806      	ldr	r0, [pc, #24]	; (8000aa8 <MX_GPIO_Init+0x11c>)
 8000a8e:	f001 f8a9 	bl	8001be4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a92:	bf00      	nop
 8000a94:	3728      	adds	r7, #40	; 0x28
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40020000 	.word	0x40020000
 8000aa4:	40020800 	.word	0x40020800
 8000aa8:	40020400 	.word	0x40020400

08000aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab0:	b672      	cpsid	i
}
 8000ab2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <Error_Handler+0x8>
	...

08000ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac6:	4a0f      	ldr	r2, [pc, #60]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ac8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000acc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ace:	4b0d      	ldr	r3, [pc, #52]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	603b      	str	r3, [r7, #0]
 8000ade:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	4a08      	ldr	r2, [pc, #32]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aea:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <HAL_MspInit+0x4c>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af2:	603b      	str	r3, [r7, #0]
 8000af4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af6:	bf00      	nop
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	40023800 	.word	0x40023800

08000b08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08a      	sub	sp, #40	; 0x28
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a17      	ldr	r2, [pc, #92]	; (8000b84 <HAL_ADC_MspInit+0x7c>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d127      	bne.n	8000b7a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	613b      	str	r3, [r7, #16]
 8000b2e:	4b16      	ldr	r3, [pc, #88]	; (8000b88 <HAL_ADC_MspInit+0x80>)
 8000b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b32:	4a15      	ldr	r2, [pc, #84]	; (8000b88 <HAL_ADC_MspInit+0x80>)
 8000b34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b38:	6453      	str	r3, [r2, #68]	; 0x44
 8000b3a:	4b13      	ldr	r3, [pc, #76]	; (8000b88 <HAL_ADC_MspInit+0x80>)
 8000b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b42:	613b      	str	r3, [r7, #16]
 8000b44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <HAL_ADC_MspInit+0x80>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a0e      	ldr	r2, [pc, #56]	; (8000b88 <HAL_ADC_MspInit+0x80>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <HAL_ADC_MspInit+0x80>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b62:	2303      	movs	r3, #3
 8000b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b66:	2303      	movs	r3, #3
 8000b68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	4619      	mov	r1, r3
 8000b74:	4805      	ldr	r0, [pc, #20]	; (8000b8c <HAL_ADC_MspInit+0x84>)
 8000b76:	f001 f835 	bl	8001be4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b7a:	bf00      	nop
 8000b7c:	3728      	adds	r7, #40	; 0x28
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40012000 	.word	0x40012000
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40020000 	.word	0x40020000

08000b90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08a      	sub	sp, #40	; 0x28
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a19      	ldr	r2, [pc, #100]	; (8000c14 <HAL_I2C_MspInit+0x84>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d12b      	bne.n	8000c0a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <HAL_I2C_MspInit+0x88>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a17      	ldr	r2, [pc, #92]	; (8000c18 <HAL_I2C_MspInit+0x88>)
 8000bbc:	f043 0302 	orr.w	r3, r3, #2
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <HAL_I2C_MspInit+0x88>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0302 	and.w	r3, r3, #2
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bce:	23c0      	movs	r3, #192	; 0xc0
 8000bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bd2:	2312      	movs	r3, #18
 8000bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bde:	2304      	movs	r3, #4
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be2:	f107 0314 	add.w	r3, r7, #20
 8000be6:	4619      	mov	r1, r3
 8000be8:	480c      	ldr	r0, [pc, #48]	; (8000c1c <HAL_I2C_MspInit+0x8c>)
 8000bea:	f000 fffb 	bl	8001be4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <HAL_I2C_MspInit+0x88>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	4a08      	ldr	r2, [pc, #32]	; (8000c18 <HAL_I2C_MspInit+0x88>)
 8000bf8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <HAL_I2C_MspInit+0x88>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c0a:	bf00      	nop
 8000c0c:	3728      	adds	r7, #40	; 0x28
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40005400 	.word	0x40005400
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40020400 	.word	0x40020400

08000c20 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b0a2      	sub	sp, #136	; 0x88
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c38:	f107 0318 	add.w	r3, r7, #24
 8000c3c:	225c      	movs	r2, #92	; 0x5c
 8000c3e:	2100      	movs	r1, #0
 8000c40:	4618      	mov	r0, r3
 8000c42:	f004 fb4b 	bl	80052dc <memset>
  if(hi2s->Instance==SPI3)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a48      	ldr	r2, [pc, #288]	; (8000d6c <HAL_I2S_MspInit+0x14c>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	f040 8089 	bne.w	8000d64 <HAL_I2S_MspInit+0x144>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1;
 8000c52:	2301      	movs	r3, #1
 8000c54:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000c56:	23c0      	movs	r3, #192	; 0xc0
 8000c58:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLI2SP_DIV2;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 4;
 8000c5e:	2304      	movs	r3, #4
 8000c60:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c62:	2302      	movs	r3, #2
 8000c64:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000c66:	2302      	movs	r3, #2
 8000c68:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c72:	f107 0318 	add.w	r3, r7, #24
 8000c76:	4618      	mov	r0, r3
 8000c78:	f002 f932 	bl	8002ee0 <HAL_RCCEx_PeriphCLKConfig>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <HAL_I2S_MspInit+0x66>
    {
      Error_Handler();
 8000c82:	f7ff ff13 	bl	8000aac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	617b      	str	r3, [r7, #20]
 8000c8a:	4b39      	ldr	r3, [pc, #228]	; (8000d70 <HAL_I2S_MspInit+0x150>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	4a38      	ldr	r2, [pc, #224]	; (8000d70 <HAL_I2S_MspInit+0x150>)
 8000c90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c94:	6413      	str	r3, [r2, #64]	; 0x40
 8000c96:	4b36      	ldr	r3, [pc, #216]	; (8000d70 <HAL_I2S_MspInit+0x150>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c9e:	617b      	str	r3, [r7, #20]
 8000ca0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	613b      	str	r3, [r7, #16]
 8000ca6:	4b32      	ldr	r3, [pc, #200]	; (8000d70 <HAL_I2S_MspInit+0x150>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a31      	ldr	r2, [pc, #196]	; (8000d70 <HAL_I2S_MspInit+0x150>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b2f      	ldr	r3, [pc, #188]	; (8000d70 <HAL_I2S_MspInit+0x150>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	613b      	str	r3, [r7, #16]
 8000cbc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	4b2b      	ldr	r3, [pc, #172]	; (8000d70 <HAL_I2S_MspInit+0x150>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4a2a      	ldr	r2, [pc, #168]	; (8000d70 <HAL_I2S_MspInit+0x150>)
 8000cc8:	f043 0302 	orr.w	r3, r3, #2
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cce:	4b28      	ldr	r3, [pc, #160]	; (8000d70 <HAL_I2S_MspInit+0x150>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f003 0302 	and.w	r3, r3, #2
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60bb      	str	r3, [r7, #8]
 8000cde:	4b24      	ldr	r3, [pc, #144]	; (8000d70 <HAL_I2S_MspInit+0x150>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a23      	ldr	r2, [pc, #140]	; (8000d70 <HAL_I2S_MspInit+0x150>)
 8000ce4:	f043 0304 	orr.w	r3, r3, #4
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b21      	ldr	r3, [pc, #132]	; (8000d70 <HAL_I2S_MspInit+0x150>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f003 0304 	and.w	r3, r3, #4
 8000cf2:	60bb      	str	r3, [r7, #8]
 8000cf4:	68bb      	ldr	r3, [r7, #8]
    /**I2S3 GPIO Configuration
    PA4     ------> I2S3_WS
    PB0     ------> I2S3_SD
    PC10     ------> I2S3_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000cf6:	2310      	movs	r3, #16
 8000cf8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	2300      	movs	r3, #0
 8000d04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d08:	2306      	movs	r3, #6
 8000d0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000d12:	4619      	mov	r1, r3
 8000d14:	4817      	ldr	r0, [pc, #92]	; (8000d74 <HAL_I2S_MspInit+0x154>)
 8000d16:	f000 ff65 	bl	8001be4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2300      	movs	r3, #0
 8000d28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000d2c:	2307      	movs	r3, #7
 8000d2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d32:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000d36:	4619      	mov	r1, r3
 8000d38:	480f      	ldr	r0, [pc, #60]	; (8000d78 <HAL_I2S_MspInit+0x158>)
 8000d3a:	f000 ff53 	bl	8001be4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d42:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d44:	2302      	movs	r3, #2
 8000d46:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d52:	2306      	movs	r3, #6
 8000d54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d58:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4807      	ldr	r0, [pc, #28]	; (8000d7c <HAL_I2S_MspInit+0x15c>)
 8000d60:	f000 ff40 	bl	8001be4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d64:	bf00      	nop
 8000d66:	3788      	adds	r7, #136	; 0x88
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40003c00 	.word	0x40003c00
 8000d70:	40023800 	.word	0x40023800
 8000d74:	40020000 	.word	0x40020000
 8000d78:	40020400 	.word	0x40020400
 8000d7c:	40020800 	.word	0x40020800

08000d80 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b09a      	sub	sp, #104	; 0x68
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d88:	f107 030c 	add.w	r3, r7, #12
 8000d8c:	225c      	movs	r2, #92	; 0x5c
 8000d8e:	2100      	movs	r1, #0
 8000d90:	4618      	mov	r0, r3
 8000d92:	f004 faa3 	bl	80052dc <memset>
  if(hrtc->Instance==RTC)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a0c      	ldr	r2, [pc, #48]	; (8000dcc <HAL_RTC_MspInit+0x4c>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d111      	bne.n	8000dc4 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000da0:	2320      	movs	r3, #32
 8000da2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000da4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000da8:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000daa:	f107 030c 	add.w	r3, r7, #12
 8000dae:	4618      	mov	r0, r3
 8000db0:	f002 f896 	bl	8002ee0 <HAL_RCCEx_PeriphCLKConfig>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000dba:	f7ff fe77 	bl	8000aac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000dbe:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <HAL_RTC_MspInit+0x50>)
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000dc4:	bf00      	nop
 8000dc6:	3768      	adds	r7, #104	; 0x68
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40002800 	.word	0x40002800
 8000dd0:	42470e3c 	.word	0x42470e3c

08000dd4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08a      	sub	sp, #40	; 0x28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a30      	ldr	r2, [pc, #192]	; (8000eb4 <HAL_SPI_MspInit+0xe0>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d15a      	bne.n	8000eac <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	4b2f      	ldr	r3, [pc, #188]	; (8000eb8 <HAL_SPI_MspInit+0xe4>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	4a2e      	ldr	r2, [pc, #184]	; (8000eb8 <HAL_SPI_MspInit+0xe4>)
 8000e00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e04:	6413      	str	r3, [r2, #64]	; 0x40
 8000e06:	4b2c      	ldr	r3, [pc, #176]	; (8000eb8 <HAL_SPI_MspInit+0xe4>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	4b28      	ldr	r3, [pc, #160]	; (8000eb8 <HAL_SPI_MspInit+0xe4>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	4a27      	ldr	r2, [pc, #156]	; (8000eb8 <HAL_SPI_MspInit+0xe4>)
 8000e1c:	f043 0304 	orr.w	r3, r3, #4
 8000e20:	6313      	str	r3, [r2, #48]	; 0x30
 8000e22:	4b25      	ldr	r3, [pc, #148]	; (8000eb8 <HAL_SPI_MspInit+0xe4>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	f003 0304 	and.w	r3, r3, #4
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	4b21      	ldr	r3, [pc, #132]	; (8000eb8 <HAL_SPI_MspInit+0xe4>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	4a20      	ldr	r2, [pc, #128]	; (8000eb8 <HAL_SPI_MspInit+0xe4>)
 8000e38:	f043 0302 	orr.w	r3, r3, #2
 8000e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3e:	4b1e      	ldr	r3, [pc, #120]	; (8000eb8 <HAL_SPI_MspInit+0xe4>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	f003 0302 	and.w	r3, r3, #2
 8000e46:	60bb      	str	r3, [r7, #8]
 8000e48:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e56:	2303      	movs	r3, #3
 8000e58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000e5a:	2307      	movs	r3, #7
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e5e:	f107 0314 	add.w	r3, r7, #20
 8000e62:	4619      	mov	r1, r3
 8000e64:	4815      	ldr	r0, [pc, #84]	; (8000ebc <HAL_SPI_MspInit+0xe8>)
 8000e66:	f000 febd 	bl	8001be4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e6a:	2304      	movs	r3, #4
 8000e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e76:	2303      	movs	r3, #3
 8000e78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e7a:	2305      	movs	r3, #5
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	4619      	mov	r1, r3
 8000e84:	480d      	ldr	r0, [pc, #52]	; (8000ebc <HAL_SPI_MspInit+0xe8>)
 8000e86:	f000 fead 	bl	8001be4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e9c:	2305      	movs	r3, #5
 8000e9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4806      	ldr	r0, [pc, #24]	; (8000ec0 <HAL_SPI_MspInit+0xec>)
 8000ea8:	f000 fe9c 	bl	8001be4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000eac:	bf00      	nop
 8000eae:	3728      	adds	r7, #40	; 0x28
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40003800 	.word	0x40003800
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40020800 	.word	0x40020800
 8000ec0:	40020400 	.word	0x40020400

08000ec4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08c      	sub	sp, #48	; 0x30
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 031c 	add.w	r3, r7, #28
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a41      	ldr	r2, [pc, #260]	; (8000fe8 <HAL_UART_MspInit+0x124>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d14b      	bne.n	8000f7e <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61bb      	str	r3, [r7, #24]
 8000eea:	4b40      	ldr	r3, [pc, #256]	; (8000fec <HAL_UART_MspInit+0x128>)
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	4a3f      	ldr	r2, [pc, #252]	; (8000fec <HAL_UART_MspInit+0x128>)
 8000ef0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef6:	4b3d      	ldr	r3, [pc, #244]	; (8000fec <HAL_UART_MspInit+0x128>)
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000efe:	61bb      	str	r3, [r7, #24]
 8000f00:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
 8000f06:	4b39      	ldr	r3, [pc, #228]	; (8000fec <HAL_UART_MspInit+0x128>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4a38      	ldr	r2, [pc, #224]	; (8000fec <HAL_UART_MspInit+0x128>)
 8000f0c:	f043 0304 	orr.w	r3, r3, #4
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
 8000f12:	4b36      	ldr	r3, [pc, #216]	; (8000fec <HAL_UART_MspInit+0x128>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	f003 0304 	and.w	r3, r3, #4
 8000f1a:	617b      	str	r3, [r7, #20]
 8000f1c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
 8000f22:	4b32      	ldr	r3, [pc, #200]	; (8000fec <HAL_UART_MspInit+0x128>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a31      	ldr	r2, [pc, #196]	; (8000fec <HAL_UART_MspInit+0x128>)
 8000f28:	f043 0308 	orr.w	r3, r3, #8
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b2f      	ldr	r3, [pc, #188]	; (8000fec <HAL_UART_MspInit+0x128>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0308 	and.w	r3, r3, #8
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f40:	2302      	movs	r3, #2
 8000f42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000f4c:	2308      	movs	r3, #8
 8000f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f50:	f107 031c 	add.w	r3, r7, #28
 8000f54:	4619      	mov	r1, r3
 8000f56:	4826      	ldr	r0, [pc, #152]	; (8000ff0 <HAL_UART_MspInit+0x12c>)
 8000f58:	f000 fe44 	bl	8001be4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f5c:	2304      	movs	r3, #4
 8000f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f60:	2302      	movs	r3, #2
 8000f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000f6c:	2308      	movs	r3, #8
 8000f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f70:	f107 031c 	add.w	r3, r7, #28
 8000f74:	4619      	mov	r1, r3
 8000f76:	481f      	ldr	r0, [pc, #124]	; (8000ff4 <HAL_UART_MspInit+0x130>)
 8000f78:	f000 fe34 	bl	8001be4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f7c:	e030      	b.n	8000fe0 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART2)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a1d      	ldr	r2, [pc, #116]	; (8000ff8 <HAL_UART_MspInit+0x134>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d12b      	bne.n	8000fe0 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	4b17      	ldr	r3, [pc, #92]	; (8000fec <HAL_UART_MspInit+0x128>)
 8000f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f90:	4a16      	ldr	r2, [pc, #88]	; (8000fec <HAL_UART_MspInit+0x128>)
 8000f92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f96:	6413      	str	r3, [r2, #64]	; 0x40
 8000f98:	4b14      	ldr	r3, [pc, #80]	; (8000fec <HAL_UART_MspInit+0x128>)
 8000f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60bb      	str	r3, [r7, #8]
 8000fa8:	4b10      	ldr	r3, [pc, #64]	; (8000fec <HAL_UART_MspInit+0x128>)
 8000faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fac:	4a0f      	ldr	r2, [pc, #60]	; (8000fec <HAL_UART_MspInit+0x128>)
 8000fae:	f043 0301 	orr.w	r3, r3, #1
 8000fb2:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb4:	4b0d      	ldr	r3, [pc, #52]	; (8000fec <HAL_UART_MspInit+0x128>)
 8000fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000fc0:	230c      	movs	r3, #12
 8000fc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fd0:	2307      	movs	r3, #7
 8000fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd4:	f107 031c 	add.w	r3, r7, #28
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4808      	ldr	r0, [pc, #32]	; (8000ffc <HAL_UART_MspInit+0x138>)
 8000fdc:	f000 fe02 	bl	8001be4 <HAL_GPIO_Init>
}
 8000fe0:	bf00      	nop
 8000fe2:	3730      	adds	r7, #48	; 0x30
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40005000 	.word	0x40005000
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40020800 	.word	0x40020800
 8000ff4:	40020c00 	.word	0x40020c00
 8000ff8:	40004400 	.word	0x40004400
 8000ffc:	40020000 	.word	0x40020000

08001000 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001004:	e7fe      	b.n	8001004 <NMI_Handler+0x4>

08001006 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800100a:	e7fe      	b.n	800100a <HardFault_Handler+0x4>

0800100c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001010:	e7fe      	b.n	8001010 <MemManage_Handler+0x4>

08001012 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001016:	e7fe      	b.n	8001016 <BusFault_Handler+0x4>

08001018 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800101c:	e7fe      	b.n	800101c <UsageFault_Handler+0x4>

0800101e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr

0800103a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800104c:	f000 f890 	bl	8001170 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}

08001054 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <SystemInit+0x20>)
 800105a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800105e:	4a05      	ldr	r2, [pc, #20]	; (8001074 <SystemInit+0x20>)
 8001060:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001064:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001078:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010b0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800107c:	f7ff ffea 	bl	8001054 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001080:	480c      	ldr	r0, [pc, #48]	; (80010b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001082:	490d      	ldr	r1, [pc, #52]	; (80010b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001084:	4a0d      	ldr	r2, [pc, #52]	; (80010bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001086:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001088:	e002      	b.n	8001090 <LoopCopyDataInit>

0800108a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800108c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800108e:	3304      	adds	r3, #4

08001090 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001090:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001092:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001094:	d3f9      	bcc.n	800108a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001096:	4a0a      	ldr	r2, [pc, #40]	; (80010c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001098:	4c0a      	ldr	r4, [pc, #40]	; (80010c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800109a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800109c:	e001      	b.n	80010a2 <LoopFillZerobss>

0800109e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800109e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a0:	3204      	adds	r2, #4

080010a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a4:	d3fb      	bcc.n	800109e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80010a6:	f004 f921 	bl	80052ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010aa:	f7ff fa29 	bl	8000500 <main>
  bx  lr    
 80010ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010bc:	0800542c 	.word	0x0800542c
  ldr r2, =_sbss
 80010c0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80010c4:	20000218 	.word	0x20000218

080010c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010c8:	e7fe      	b.n	80010c8 <ADC_IRQHandler>
	...

080010cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010d0:	4b0e      	ldr	r3, [pc, #56]	; (800110c <HAL_Init+0x40>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a0d      	ldr	r2, [pc, #52]	; (800110c <HAL_Init+0x40>)
 80010d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010dc:	4b0b      	ldr	r3, [pc, #44]	; (800110c <HAL_Init+0x40>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a0a      	ldr	r2, [pc, #40]	; (800110c <HAL_Init+0x40>)
 80010e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e8:	4b08      	ldr	r3, [pc, #32]	; (800110c <HAL_Init+0x40>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a07      	ldr	r2, [pc, #28]	; (800110c <HAL_Init+0x40>)
 80010ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f4:	2003      	movs	r0, #3
 80010f6:	f000 fd41 	bl	8001b7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010fa:	200f      	movs	r0, #15
 80010fc:	f000 f808 	bl	8001110 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001100:	f7ff fcda 	bl	8000ab8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40023c00 	.word	0x40023c00

08001110 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001118:	4b12      	ldr	r3, [pc, #72]	; (8001164 <HAL_InitTick+0x54>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	4b12      	ldr	r3, [pc, #72]	; (8001168 <HAL_InitTick+0x58>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	4619      	mov	r1, r3
 8001122:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001126:	fbb3 f3f1 	udiv	r3, r3, r1
 800112a:	fbb2 f3f3 	udiv	r3, r2, r3
 800112e:	4618      	mov	r0, r3
 8001130:	f000 fd4b 	bl	8001bca <HAL_SYSTICK_Config>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e00e      	b.n	800115c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2b0f      	cmp	r3, #15
 8001142:	d80a      	bhi.n	800115a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001144:	2200      	movs	r2, #0
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	f04f 30ff 	mov.w	r0, #4294967295
 800114c:	f000 fd21 	bl	8001b92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001150:	4a06      	ldr	r2, [pc, #24]	; (800116c <HAL_InitTick+0x5c>)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001156:	2300      	movs	r3, #0
 8001158:	e000      	b.n	800115c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
}
 800115c:	4618      	mov	r0, r3
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000000 	.word	0x20000000
 8001168:	20000008 	.word	0x20000008
 800116c:	20000004 	.word	0x20000004

08001170 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <HAL_IncTick+0x20>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	461a      	mov	r2, r3
 800117a:	4b06      	ldr	r3, [pc, #24]	; (8001194 <HAL_IncTick+0x24>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4413      	add	r3, r2
 8001180:	4a04      	ldr	r2, [pc, #16]	; (8001194 <HAL_IncTick+0x24>)
 8001182:	6013      	str	r3, [r2, #0]
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	20000008 	.word	0x20000008
 8001194:	20000214 	.word	0x20000214

08001198 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  return uwTick;
 800119c:	4b03      	ldr	r3, [pc, #12]	; (80011ac <HAL_GetTick+0x14>)
 800119e:	681b      	ldr	r3, [r3, #0]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	20000214 	.word	0x20000214

080011b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011b8:	f7ff ffee 	bl	8001198 <HAL_GetTick>
 80011bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011c8:	d005      	beq.n	80011d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ca:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <HAL_Delay+0x44>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	461a      	mov	r2, r3
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	4413      	add	r3, r2
 80011d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011d6:	bf00      	nop
 80011d8:	f7ff ffde 	bl	8001198 <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d8f7      	bhi.n	80011d8 <HAL_Delay+0x28>
  {
  }
}
 80011e8:	bf00      	nop
 80011ea:	bf00      	nop
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000008 	.word	0x20000008

080011f8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001200:	2300      	movs	r3, #0
 8001202:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d101      	bne.n	800120e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e033      	b.n	8001276 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	2b00      	cmp	r3, #0
 8001214:	d109      	bne.n	800122a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff fc76 	bl	8000b08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2200      	movs	r2, #0
 8001220:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	f003 0310 	and.w	r3, r3, #16
 8001232:	2b00      	cmp	r3, #0
 8001234:	d118      	bne.n	8001268 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800123e:	f023 0302 	bic.w	r3, r3, #2
 8001242:	f043 0202 	orr.w	r2, r3, #2
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f000 fae8 	bl	8001820 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125a:	f023 0303 	bic.w	r3, r3, #3
 800125e:	f043 0201 	orr.w	r2, r3, #1
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	641a      	str	r2, [r3, #64]	; 0x40
 8001266:	e001      	b.n	800126c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001274:	7bfb      	ldrb	r3, [r7, #15]
}
 8001276:	4618      	mov	r0, r3
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001288:	2300      	movs	r3, #0
 800128a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001292:	2b01      	cmp	r3, #1
 8001294:	d101      	bne.n	800129a <HAL_ADC_Start+0x1a>
 8001296:	2302      	movs	r3, #2
 8001298:	e0b2      	b.n	8001400 <HAL_ADC_Start+0x180>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2201      	movs	r2, #1
 800129e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	f003 0301 	and.w	r3, r3, #1
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d018      	beq.n	80012e2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	689a      	ldr	r2, [r3, #8]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f042 0201 	orr.w	r2, r2, #1
 80012be:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012c0:	4b52      	ldr	r3, [pc, #328]	; (800140c <HAL_ADC_Start+0x18c>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a52      	ldr	r2, [pc, #328]	; (8001410 <HAL_ADC_Start+0x190>)
 80012c6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ca:	0c9a      	lsrs	r2, r3, #18
 80012cc:	4613      	mov	r3, r2
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	4413      	add	r3, r2
 80012d2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80012d4:	e002      	b.n	80012dc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	3b01      	subs	r3, #1
 80012da:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1f9      	bne.n	80012d6 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d17a      	bne.n	80013e6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80012f8:	f023 0301 	bic.w	r3, r3, #1
 80012fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800130e:	2b00      	cmp	r3, #0
 8001310:	d007      	beq.n	8001322 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800131a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800132a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800132e:	d106      	bne.n	800133e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001334:	f023 0206 	bic.w	r2, r3, #6
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	645a      	str	r2, [r3, #68]	; 0x44
 800133c:	e002      	b.n	8001344 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2200      	movs	r2, #0
 8001348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800134c:	4b31      	ldr	r3, [pc, #196]	; (8001414 <HAL_ADC_Start+0x194>)
 800134e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001358:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f003 031f 	and.w	r3, r3, #31
 8001362:	2b00      	cmp	r3, #0
 8001364:	d12a      	bne.n	80013bc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a2b      	ldr	r2, [pc, #172]	; (8001418 <HAL_ADC_Start+0x198>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d015      	beq.n	800139c <HAL_ADC_Start+0x11c>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a29      	ldr	r2, [pc, #164]	; (800141c <HAL_ADC_Start+0x19c>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d105      	bne.n	8001386 <HAL_ADC_Start+0x106>
 800137a:	4b26      	ldr	r3, [pc, #152]	; (8001414 <HAL_ADC_Start+0x194>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f003 031f 	and.w	r3, r3, #31
 8001382:	2b00      	cmp	r3, #0
 8001384:	d00a      	beq.n	800139c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a25      	ldr	r2, [pc, #148]	; (8001420 <HAL_ADC_Start+0x1a0>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d136      	bne.n	80013fe <HAL_ADC_Start+0x17e>
 8001390:	4b20      	ldr	r3, [pc, #128]	; (8001414 <HAL_ADC_Start+0x194>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f003 0310 	and.w	r3, r3, #16
 8001398:	2b00      	cmp	r3, #0
 800139a:	d130      	bne.n	80013fe <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d129      	bne.n	80013fe <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	689a      	ldr	r2, [r3, #8]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	e020      	b.n	80013fe <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a15      	ldr	r2, [pc, #84]	; (8001418 <HAL_ADC_Start+0x198>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d11b      	bne.n	80013fe <HAL_ADC_Start+0x17e>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d114      	bne.n	80013fe <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	689a      	ldr	r2, [r3, #8]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	e00b      	b.n	80013fe <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ea:	f043 0210 	orr.w	r2, r3, #16
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f6:	f043 0201 	orr.w	r2, r3, #1
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80013fe:	2300      	movs	r3, #0
}
 8001400:	4618      	mov	r0, r3
 8001402:	3714      	adds	r7, #20
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	20000000 	.word	0x20000000
 8001410:	431bde83 	.word	0x431bde83
 8001414:	40012300 	.word	0x40012300
 8001418:	40012000 	.word	0x40012000
 800141c:	40012100 	.word	0x40012100
 8001420:	40012200 	.word	0x40012200

08001424 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001432:	2b01      	cmp	r3, #1
 8001434:	d101      	bne.n	800143a <HAL_ADC_Stop+0x16>
 8001436:	2302      	movs	r3, #2
 8001438:	e021      	b.n	800147e <HAL_ADC_Stop+0x5a>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2201      	movs	r2, #1
 800143e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	689a      	ldr	r2, [r3, #8]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f022 0201 	bic.w	r2, r2, #1
 8001450:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	2b00      	cmp	r3, #0
 800145e:	d109      	bne.n	8001474 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001464:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001468:	f023 0301 	bic.w	r3, r3, #1
 800146c:	f043 0201 	orr.w	r2, r3, #1
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b084      	sub	sp, #16
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
 8001492:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001494:	2300      	movs	r3, #0
 8001496:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014a6:	d113      	bne.n	80014d0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80014b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014b6:	d10b      	bne.n	80014d0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014bc:	f043 0220 	orr.w	r2, r3, #32
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2200      	movs	r2, #0
 80014c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e063      	b.n	8001598 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80014d0:	f7ff fe62 	bl	8001198 <HAL_GetTick>
 80014d4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80014d6:	e021      	b.n	800151c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014de:	d01d      	beq.n	800151c <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d007      	beq.n	80014f6 <HAL_ADC_PollForConversion+0x6c>
 80014e6:	f7ff fe57 	bl	8001198 <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	683a      	ldr	r2, [r7, #0]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d212      	bcs.n	800151c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	2b02      	cmp	r3, #2
 8001502:	d00b      	beq.n	800151c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001508:	f043 0204 	orr.w	r2, r3, #4
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e03d      	b.n	8001598 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b02      	cmp	r3, #2
 8001528:	d1d6      	bne.n	80014d8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f06f 0212 	mvn.w	r2, #18
 8001532:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001538:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d123      	bne.n	8001596 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001552:	2b00      	cmp	r3, #0
 8001554:	d11f      	bne.n	8001596 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001560:	2b00      	cmp	r3, #0
 8001562:	d006      	beq.n	8001572 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800156e:	2b00      	cmp	r3, #0
 8001570:	d111      	bne.n	8001596 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d105      	bne.n	8001596 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	f043 0201 	orr.w	r2, r3, #1
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
	...

080015bc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80015c6:	2300      	movs	r3, #0
 80015c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d101      	bne.n	80015d8 <HAL_ADC_ConfigChannel+0x1c>
 80015d4:	2302      	movs	r3, #2
 80015d6:	e113      	b.n	8001800 <HAL_ADC_ConfigChannel+0x244>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2201      	movs	r2, #1
 80015dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2b09      	cmp	r3, #9
 80015e6:	d925      	bls.n	8001634 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	68d9      	ldr	r1, [r3, #12]
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	461a      	mov	r2, r3
 80015f6:	4613      	mov	r3, r2
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	4413      	add	r3, r2
 80015fc:	3b1e      	subs	r3, #30
 80015fe:	2207      	movs	r2, #7
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	43da      	mvns	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	400a      	ands	r2, r1
 800160c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	68d9      	ldr	r1, [r3, #12]
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	689a      	ldr	r2, [r3, #8]
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	b29b      	uxth	r3, r3
 800161e:	4618      	mov	r0, r3
 8001620:	4603      	mov	r3, r0
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	4403      	add	r3, r0
 8001626:	3b1e      	subs	r3, #30
 8001628:	409a      	lsls	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	430a      	orrs	r2, r1
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	e022      	b.n	800167a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6919      	ldr	r1, [r3, #16]
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	b29b      	uxth	r3, r3
 8001640:	461a      	mov	r2, r3
 8001642:	4613      	mov	r3, r2
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	4413      	add	r3, r2
 8001648:	2207      	movs	r2, #7
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43da      	mvns	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	400a      	ands	r2, r1
 8001656:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6919      	ldr	r1, [r3, #16]
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	689a      	ldr	r2, [r3, #8]
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	b29b      	uxth	r3, r3
 8001668:	4618      	mov	r0, r3
 800166a:	4603      	mov	r3, r0
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	4403      	add	r3, r0
 8001670:	409a      	lsls	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	430a      	orrs	r2, r1
 8001678:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	2b06      	cmp	r3, #6
 8001680:	d824      	bhi.n	80016cc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685a      	ldr	r2, [r3, #4]
 800168c:	4613      	mov	r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	4413      	add	r3, r2
 8001692:	3b05      	subs	r3, #5
 8001694:	221f      	movs	r2, #31
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	43da      	mvns	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	400a      	ands	r2, r1
 80016a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	4618      	mov	r0, r3
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685a      	ldr	r2, [r3, #4]
 80016b6:	4613      	mov	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	4413      	add	r3, r2
 80016bc:	3b05      	subs	r3, #5
 80016be:	fa00 f203 	lsl.w	r2, r0, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	430a      	orrs	r2, r1
 80016c8:	635a      	str	r2, [r3, #52]	; 0x34
 80016ca:	e04c      	b.n	8001766 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	2b0c      	cmp	r3, #12
 80016d2:	d824      	bhi.n	800171e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685a      	ldr	r2, [r3, #4]
 80016de:	4613      	mov	r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	4413      	add	r3, r2
 80016e4:	3b23      	subs	r3, #35	; 0x23
 80016e6:	221f      	movs	r2, #31
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	43da      	mvns	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	400a      	ands	r2, r1
 80016f4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	b29b      	uxth	r3, r3
 8001702:	4618      	mov	r0, r3
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685a      	ldr	r2, [r3, #4]
 8001708:	4613      	mov	r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	4413      	add	r3, r2
 800170e:	3b23      	subs	r3, #35	; 0x23
 8001710:	fa00 f203 	lsl.w	r2, r0, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	430a      	orrs	r2, r1
 800171a:	631a      	str	r2, [r3, #48]	; 0x30
 800171c:	e023      	b.n	8001766 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685a      	ldr	r2, [r3, #4]
 8001728:	4613      	mov	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	4413      	add	r3, r2
 800172e:	3b41      	subs	r3, #65	; 0x41
 8001730:	221f      	movs	r2, #31
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	43da      	mvns	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	400a      	ands	r2, r1
 800173e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	b29b      	uxth	r3, r3
 800174c:	4618      	mov	r0, r3
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685a      	ldr	r2, [r3, #4]
 8001752:	4613      	mov	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4413      	add	r3, r2
 8001758:	3b41      	subs	r3, #65	; 0x41
 800175a:	fa00 f203 	lsl.w	r2, r0, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	430a      	orrs	r2, r1
 8001764:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001766:	4b29      	ldr	r3, [pc, #164]	; (800180c <HAL_ADC_ConfigChannel+0x250>)
 8001768:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a28      	ldr	r2, [pc, #160]	; (8001810 <HAL_ADC_ConfigChannel+0x254>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d10f      	bne.n	8001794 <HAL_ADC_ConfigChannel+0x1d8>
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2b12      	cmp	r3, #18
 800177a:	d10b      	bne.n	8001794 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a1d      	ldr	r2, [pc, #116]	; (8001810 <HAL_ADC_ConfigChannel+0x254>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d12b      	bne.n	80017f6 <HAL_ADC_ConfigChannel+0x23a>
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a1c      	ldr	r2, [pc, #112]	; (8001814 <HAL_ADC_ConfigChannel+0x258>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d003      	beq.n	80017b0 <HAL_ADC_ConfigChannel+0x1f4>
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2b11      	cmp	r3, #17
 80017ae:	d122      	bne.n	80017f6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a11      	ldr	r2, [pc, #68]	; (8001814 <HAL_ADC_ConfigChannel+0x258>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d111      	bne.n	80017f6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017d2:	4b11      	ldr	r3, [pc, #68]	; (8001818 <HAL_ADC_ConfigChannel+0x25c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a11      	ldr	r2, [pc, #68]	; (800181c <HAL_ADC_ConfigChannel+0x260>)
 80017d8:	fba2 2303 	umull	r2, r3, r2, r3
 80017dc:	0c9a      	lsrs	r2, r3, #18
 80017de:	4613      	mov	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	4413      	add	r3, r2
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80017e8:	e002      	b.n	80017f0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	3b01      	subs	r3, #1
 80017ee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1f9      	bne.n	80017ea <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80017fe:	2300      	movs	r3, #0
}
 8001800:	4618      	mov	r0, r3
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	40012300 	.word	0x40012300
 8001810:	40012000 	.word	0x40012000
 8001814:	10000012 	.word	0x10000012
 8001818:	20000000 	.word	0x20000000
 800181c:	431bde83 	.word	0x431bde83

08001820 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001828:	4b79      	ldr	r3, [pc, #484]	; (8001a10 <ADC_Init+0x1f0>)
 800182a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	685a      	ldr	r2, [r3, #4]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	431a      	orrs	r2, r3
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	685a      	ldr	r2, [r3, #4]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001854:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	6859      	ldr	r1, [r3, #4]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	691b      	ldr	r3, [r3, #16]
 8001860:	021a      	lsls	r2, r3, #8
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	430a      	orrs	r2, r1
 8001868:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	685a      	ldr	r2, [r3, #4]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001878:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	6859      	ldr	r1, [r3, #4]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689a      	ldr	r2, [r3, #8]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	430a      	orrs	r2, r1
 800188a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	689a      	ldr	r2, [r3, #8]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800189a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6899      	ldr	r1, [r3, #8]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	68da      	ldr	r2, [r3, #12]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	430a      	orrs	r2, r1
 80018ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b2:	4a58      	ldr	r2, [pc, #352]	; (8001a14 <ADC_Init+0x1f4>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d022      	beq.n	80018fe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	689a      	ldr	r2, [r3, #8]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6899      	ldr	r1, [r3, #8]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	430a      	orrs	r2, r1
 80018d8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	6899      	ldr	r1, [r3, #8]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	430a      	orrs	r2, r1
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	e00f      	b.n	800191e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	689a      	ldr	r2, [r3, #8]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800190c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800191c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	689a      	ldr	r2, [r3, #8]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f022 0202 	bic.w	r2, r2, #2
 800192c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	6899      	ldr	r1, [r3, #8]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	7e1b      	ldrb	r3, [r3, #24]
 8001938:	005a      	lsls	r2, r3, #1
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	430a      	orrs	r2, r1
 8001940:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d01b      	beq.n	8001984 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	685a      	ldr	r2, [r3, #4]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800195a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800196a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6859      	ldr	r1, [r3, #4]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001976:	3b01      	subs	r3, #1
 8001978:	035a      	lsls	r2, r3, #13
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	430a      	orrs	r2, r1
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	e007      	b.n	8001994 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	685a      	ldr	r2, [r3, #4]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001992:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80019a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	3b01      	subs	r3, #1
 80019b0:	051a      	lsls	r2, r3, #20
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	430a      	orrs	r2, r1
 80019b8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	689a      	ldr	r2, [r3, #8]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80019c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	6899      	ldr	r1, [r3, #8]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019d6:	025a      	lsls	r2, r3, #9
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	430a      	orrs	r2, r1
 80019de:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	689a      	ldr	r2, [r3, #8]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6899      	ldr	r1, [r3, #8]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	029a      	lsls	r2, r3, #10
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	430a      	orrs	r2, r1
 8001a02:	609a      	str	r2, [r3, #8]
}
 8001a04:	bf00      	nop
 8001a06:	3714      	adds	r7, #20
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	40012300 	.word	0x40012300
 8001a14:	0f000001 	.word	0x0f000001

08001a18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a28:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <__NVIC_SetPriorityGrouping+0x44>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a2e:	68ba      	ldr	r2, [r7, #8]
 8001a30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a34:	4013      	ands	r3, r2
 8001a36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a4a:	4a04      	ldr	r2, [pc, #16]	; (8001a5c <__NVIC_SetPriorityGrouping+0x44>)
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	60d3      	str	r3, [r2, #12]
}
 8001a50:	bf00      	nop
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	e000ed00 	.word	0xe000ed00

08001a60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a64:	4b04      	ldr	r3, [pc, #16]	; (8001a78 <__NVIC_GetPriorityGrouping+0x18>)
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	0a1b      	lsrs	r3, r3, #8
 8001a6a:	f003 0307 	and.w	r3, r3, #7
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	6039      	str	r1, [r7, #0]
 8001a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	db0a      	blt.n	8001aa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	b2da      	uxtb	r2, r3
 8001a94:	490c      	ldr	r1, [pc, #48]	; (8001ac8 <__NVIC_SetPriority+0x4c>)
 8001a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9a:	0112      	lsls	r2, r2, #4
 8001a9c:	b2d2      	uxtb	r2, r2
 8001a9e:	440b      	add	r3, r1
 8001aa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aa4:	e00a      	b.n	8001abc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	b2da      	uxtb	r2, r3
 8001aaa:	4908      	ldr	r1, [pc, #32]	; (8001acc <__NVIC_SetPriority+0x50>)
 8001aac:	79fb      	ldrb	r3, [r7, #7]
 8001aae:	f003 030f 	and.w	r3, r3, #15
 8001ab2:	3b04      	subs	r3, #4
 8001ab4:	0112      	lsls	r2, r2, #4
 8001ab6:	b2d2      	uxtb	r2, r2
 8001ab8:	440b      	add	r3, r1
 8001aba:	761a      	strb	r2, [r3, #24]
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	e000e100 	.word	0xe000e100
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b089      	sub	sp, #36	; 0x24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	f1c3 0307 	rsb	r3, r3, #7
 8001aea:	2b04      	cmp	r3, #4
 8001aec:	bf28      	it	cs
 8001aee:	2304      	movcs	r3, #4
 8001af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	3304      	adds	r3, #4
 8001af6:	2b06      	cmp	r3, #6
 8001af8:	d902      	bls.n	8001b00 <NVIC_EncodePriority+0x30>
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	3b03      	subs	r3, #3
 8001afe:	e000      	b.n	8001b02 <NVIC_EncodePriority+0x32>
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b04:	f04f 32ff 	mov.w	r2, #4294967295
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43da      	mvns	r2, r3
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	401a      	ands	r2, r3
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b18:	f04f 31ff 	mov.w	r1, #4294967295
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b22:	43d9      	mvns	r1, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b28:	4313      	orrs	r3, r2
         );
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3724      	adds	r7, #36	; 0x24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
	...

08001b38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3b01      	subs	r3, #1
 8001b44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b48:	d301      	bcc.n	8001b4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e00f      	b.n	8001b6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b4e:	4a0a      	ldr	r2, [pc, #40]	; (8001b78 <SysTick_Config+0x40>)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3b01      	subs	r3, #1
 8001b54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b56:	210f      	movs	r1, #15
 8001b58:	f04f 30ff 	mov.w	r0, #4294967295
 8001b5c:	f7ff ff8e 	bl	8001a7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b60:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <SysTick_Config+0x40>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b66:	4b04      	ldr	r3, [pc, #16]	; (8001b78 <SysTick_Config+0x40>)
 8001b68:	2207      	movs	r2, #7
 8001b6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	e000e010 	.word	0xe000e010

08001b7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f7ff ff47 	bl	8001a18 <__NVIC_SetPriorityGrouping>
}
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b086      	sub	sp, #24
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	4603      	mov	r3, r0
 8001b9a:	60b9      	str	r1, [r7, #8]
 8001b9c:	607a      	str	r2, [r7, #4]
 8001b9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ba4:	f7ff ff5c 	bl	8001a60 <__NVIC_GetPriorityGrouping>
 8001ba8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	68b9      	ldr	r1, [r7, #8]
 8001bae:	6978      	ldr	r0, [r7, #20]
 8001bb0:	f7ff ff8e 	bl	8001ad0 <NVIC_EncodePriority>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bba:	4611      	mov	r1, r2
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff ff5d 	bl	8001a7c <__NVIC_SetPriority>
}
 8001bc2:	bf00      	nop
 8001bc4:	3718      	adds	r7, #24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b082      	sub	sp, #8
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7ff ffb0 	bl	8001b38 <SysTick_Config>
 8001bd8:	4603      	mov	r3, r0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
	...

08001be4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b089      	sub	sp, #36	; 0x24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61fb      	str	r3, [r7, #28]
 8001bfe:	e165      	b.n	8001ecc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c00:	2201      	movs	r2, #1
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	4013      	ands	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	f040 8154 	bne.w	8001ec6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f003 0303 	and.w	r3, r3, #3
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d005      	beq.n	8001c36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d130      	bne.n	8001c98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	2203      	movs	r2, #3
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	43db      	mvns	r3, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	68da      	ldr	r2, [r3, #12]
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	43db      	mvns	r3, r3
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	091b      	lsrs	r3, r3, #4
 8001c82:	f003 0201 	and.w	r2, r3, #1
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f003 0303 	and.w	r3, r3, #3
 8001ca0:	2b03      	cmp	r3, #3
 8001ca2:	d017      	beq.n	8001cd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	2203      	movs	r2, #3
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	689a      	ldr	r2, [r3, #8]
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f003 0303 	and.w	r3, r3, #3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d123      	bne.n	8001d28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	08da      	lsrs	r2, r3, #3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3208      	adds	r2, #8
 8001ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	f003 0307 	and.w	r3, r3, #7
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	220f      	movs	r2, #15
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	691a      	ldr	r2, [r3, #16]
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	08da      	lsrs	r2, r3, #3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	3208      	adds	r2, #8
 8001d22:	69b9      	ldr	r1, [r7, #24]
 8001d24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	2203      	movs	r2, #3
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f003 0203 	and.w	r2, r3, #3
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f000 80ae 	beq.w	8001ec6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	4b5d      	ldr	r3, [pc, #372]	; (8001ee4 <HAL_GPIO_Init+0x300>)
 8001d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d72:	4a5c      	ldr	r2, [pc, #368]	; (8001ee4 <HAL_GPIO_Init+0x300>)
 8001d74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d78:	6453      	str	r3, [r2, #68]	; 0x44
 8001d7a:	4b5a      	ldr	r3, [pc, #360]	; (8001ee4 <HAL_GPIO_Init+0x300>)
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d86:	4a58      	ldr	r2, [pc, #352]	; (8001ee8 <HAL_GPIO_Init+0x304>)
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	089b      	lsrs	r3, r3, #2
 8001d8c:	3302      	adds	r3, #2
 8001d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	f003 0303 	and.w	r3, r3, #3
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	220f      	movs	r2, #15
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	43db      	mvns	r3, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4013      	ands	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a4f      	ldr	r2, [pc, #316]	; (8001eec <HAL_GPIO_Init+0x308>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d025      	beq.n	8001dfe <HAL_GPIO_Init+0x21a>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a4e      	ldr	r2, [pc, #312]	; (8001ef0 <HAL_GPIO_Init+0x30c>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d01f      	beq.n	8001dfa <HAL_GPIO_Init+0x216>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a4d      	ldr	r2, [pc, #308]	; (8001ef4 <HAL_GPIO_Init+0x310>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d019      	beq.n	8001df6 <HAL_GPIO_Init+0x212>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a4c      	ldr	r2, [pc, #304]	; (8001ef8 <HAL_GPIO_Init+0x314>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d013      	beq.n	8001df2 <HAL_GPIO_Init+0x20e>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a4b      	ldr	r2, [pc, #300]	; (8001efc <HAL_GPIO_Init+0x318>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d00d      	beq.n	8001dee <HAL_GPIO_Init+0x20a>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a4a      	ldr	r2, [pc, #296]	; (8001f00 <HAL_GPIO_Init+0x31c>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d007      	beq.n	8001dea <HAL_GPIO_Init+0x206>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a49      	ldr	r2, [pc, #292]	; (8001f04 <HAL_GPIO_Init+0x320>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d101      	bne.n	8001de6 <HAL_GPIO_Init+0x202>
 8001de2:	2306      	movs	r3, #6
 8001de4:	e00c      	b.n	8001e00 <HAL_GPIO_Init+0x21c>
 8001de6:	2307      	movs	r3, #7
 8001de8:	e00a      	b.n	8001e00 <HAL_GPIO_Init+0x21c>
 8001dea:	2305      	movs	r3, #5
 8001dec:	e008      	b.n	8001e00 <HAL_GPIO_Init+0x21c>
 8001dee:	2304      	movs	r3, #4
 8001df0:	e006      	b.n	8001e00 <HAL_GPIO_Init+0x21c>
 8001df2:	2303      	movs	r3, #3
 8001df4:	e004      	b.n	8001e00 <HAL_GPIO_Init+0x21c>
 8001df6:	2302      	movs	r3, #2
 8001df8:	e002      	b.n	8001e00 <HAL_GPIO_Init+0x21c>
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e000      	b.n	8001e00 <HAL_GPIO_Init+0x21c>
 8001dfe:	2300      	movs	r3, #0
 8001e00:	69fa      	ldr	r2, [r7, #28]
 8001e02:	f002 0203 	and.w	r2, r2, #3
 8001e06:	0092      	lsls	r2, r2, #2
 8001e08:	4093      	lsls	r3, r2
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e10:	4935      	ldr	r1, [pc, #212]	; (8001ee8 <HAL_GPIO_Init+0x304>)
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	089b      	lsrs	r3, r3, #2
 8001e16:	3302      	adds	r3, #2
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e1e:	4b3a      	ldr	r3, [pc, #232]	; (8001f08 <HAL_GPIO_Init+0x324>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	43db      	mvns	r3, r3
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e42:	4a31      	ldr	r2, [pc, #196]	; (8001f08 <HAL_GPIO_Init+0x324>)
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e48:	4b2f      	ldr	r3, [pc, #188]	; (8001f08 <HAL_GPIO_Init+0x324>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	43db      	mvns	r3, r3
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	4013      	ands	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d003      	beq.n	8001e6c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e6c:	4a26      	ldr	r2, [pc, #152]	; (8001f08 <HAL_GPIO_Init+0x324>)
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e72:	4b25      	ldr	r3, [pc, #148]	; (8001f08 <HAL_GPIO_Init+0x324>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e96:	4a1c      	ldr	r2, [pc, #112]	; (8001f08 <HAL_GPIO_Init+0x324>)
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e9c:	4b1a      	ldr	r3, [pc, #104]	; (8001f08 <HAL_GPIO_Init+0x324>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d003      	beq.n	8001ec0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ec0:	4a11      	ldr	r2, [pc, #68]	; (8001f08 <HAL_GPIO_Init+0x324>)
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	61fb      	str	r3, [r7, #28]
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	2b0f      	cmp	r3, #15
 8001ed0:	f67f ae96 	bls.w	8001c00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ed4:	bf00      	nop
 8001ed6:	bf00      	nop
 8001ed8:	3724      	adds	r7, #36	; 0x24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	40013800 	.word	0x40013800
 8001eec:	40020000 	.word	0x40020000
 8001ef0:	40020400 	.word	0x40020400
 8001ef4:	40020800 	.word	0x40020800
 8001ef8:	40020c00 	.word	0x40020c00
 8001efc:	40021000 	.word	0x40021000
 8001f00:	40021400 	.word	0x40021400
 8001f04:	40021800 	.word	0x40021800
 8001f08:	40013c00 	.word	0x40013c00

08001f0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	460b      	mov	r3, r1
 8001f16:	807b      	strh	r3, [r7, #2]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f1c:	787b      	ldrb	r3, [r7, #1]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f22:	887a      	ldrh	r2, [r7, #2]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f28:	e003      	b.n	8001f32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f2a:	887b      	ldrh	r3, [r7, #2]
 8001f2c:	041a      	lsls	r2, r3, #16
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	619a      	str	r2, [r3, #24]
}
 8001f32:	bf00      	nop
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b085      	sub	sp, #20
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
 8001f46:	460b      	mov	r3, r1
 8001f48:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f50:	887a      	ldrh	r2, [r7, #2]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	4013      	ands	r3, r2
 8001f56:	041a      	lsls	r2, r3, #16
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	43d9      	mvns	r1, r3
 8001f5c:	887b      	ldrh	r3, [r7, #2]
 8001f5e:	400b      	ands	r3, r1
 8001f60:	431a      	orrs	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	619a      	str	r2, [r3, #24]
}
 8001f66:	bf00      	nop
 8001f68:	3714      	adds	r7, #20
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
	...

08001f74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e12b      	b.n	80021de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d106      	bne.n	8001fa0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7fe fdf8 	bl	8000b90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2224      	movs	r2, #36	; 0x24
 8001fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f022 0201 	bic.w	r2, r2, #1
 8001fb6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fc6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fd6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001fd8:	f000 ff5a 	bl	8002e90 <HAL_RCC_GetPCLK1Freq>
 8001fdc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	4a81      	ldr	r2, [pc, #516]	; (80021e8 <HAL_I2C_Init+0x274>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d807      	bhi.n	8001ff8 <HAL_I2C_Init+0x84>
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	4a80      	ldr	r2, [pc, #512]	; (80021ec <HAL_I2C_Init+0x278>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	bf94      	ite	ls
 8001ff0:	2301      	movls	r3, #1
 8001ff2:	2300      	movhi	r3, #0
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	e006      	b.n	8002006 <HAL_I2C_Init+0x92>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	4a7d      	ldr	r2, [pc, #500]	; (80021f0 <HAL_I2C_Init+0x27c>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	bf94      	ite	ls
 8002000:	2301      	movls	r3, #1
 8002002:	2300      	movhi	r3, #0
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e0e7      	b.n	80021de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	4a78      	ldr	r2, [pc, #480]	; (80021f4 <HAL_I2C_Init+0x280>)
 8002012:	fba2 2303 	umull	r2, r3, r2, r3
 8002016:	0c9b      	lsrs	r3, r3, #18
 8002018:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	68ba      	ldr	r2, [r7, #8]
 800202a:	430a      	orrs	r2, r1
 800202c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	4a6a      	ldr	r2, [pc, #424]	; (80021e8 <HAL_I2C_Init+0x274>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d802      	bhi.n	8002048 <HAL_I2C_Init+0xd4>
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	3301      	adds	r3, #1
 8002046:	e009      	b.n	800205c <HAL_I2C_Init+0xe8>
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800204e:	fb02 f303 	mul.w	r3, r2, r3
 8002052:	4a69      	ldr	r2, [pc, #420]	; (80021f8 <HAL_I2C_Init+0x284>)
 8002054:	fba2 2303 	umull	r2, r3, r2, r3
 8002058:	099b      	lsrs	r3, r3, #6
 800205a:	3301      	adds	r3, #1
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	6812      	ldr	r2, [r2, #0]
 8002060:	430b      	orrs	r3, r1
 8002062:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800206e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	495c      	ldr	r1, [pc, #368]	; (80021e8 <HAL_I2C_Init+0x274>)
 8002078:	428b      	cmp	r3, r1
 800207a:	d819      	bhi.n	80020b0 <HAL_I2C_Init+0x13c>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	1e59      	subs	r1, r3, #1
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	fbb1 f3f3 	udiv	r3, r1, r3
 800208a:	1c59      	adds	r1, r3, #1
 800208c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002090:	400b      	ands	r3, r1
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00a      	beq.n	80020ac <HAL_I2C_Init+0x138>
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	1e59      	subs	r1, r3, #1
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80020a4:	3301      	adds	r3, #1
 80020a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020aa:	e051      	b.n	8002150 <HAL_I2C_Init+0x1dc>
 80020ac:	2304      	movs	r3, #4
 80020ae:	e04f      	b.n	8002150 <HAL_I2C_Init+0x1dc>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d111      	bne.n	80020dc <HAL_I2C_Init+0x168>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	1e58      	subs	r0, r3, #1
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6859      	ldr	r1, [r3, #4]
 80020c0:	460b      	mov	r3, r1
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	440b      	add	r3, r1
 80020c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80020ca:	3301      	adds	r3, #1
 80020cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	bf0c      	ite	eq
 80020d4:	2301      	moveq	r3, #1
 80020d6:	2300      	movne	r3, #0
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	e012      	b.n	8002102 <HAL_I2C_Init+0x18e>
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	1e58      	subs	r0, r3, #1
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6859      	ldr	r1, [r3, #4]
 80020e4:	460b      	mov	r3, r1
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	440b      	add	r3, r1
 80020ea:	0099      	lsls	r1, r3, #2
 80020ec:	440b      	add	r3, r1
 80020ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80020f2:	3301      	adds	r3, #1
 80020f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	bf0c      	ite	eq
 80020fc:	2301      	moveq	r3, #1
 80020fe:	2300      	movne	r3, #0
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <HAL_I2C_Init+0x196>
 8002106:	2301      	movs	r3, #1
 8002108:	e022      	b.n	8002150 <HAL_I2C_Init+0x1dc>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d10e      	bne.n	8002130 <HAL_I2C_Init+0x1bc>
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	1e58      	subs	r0, r3, #1
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6859      	ldr	r1, [r3, #4]
 800211a:	460b      	mov	r3, r1
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	440b      	add	r3, r1
 8002120:	fbb0 f3f3 	udiv	r3, r0, r3
 8002124:	3301      	adds	r3, #1
 8002126:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800212a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800212e:	e00f      	b.n	8002150 <HAL_I2C_Init+0x1dc>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	1e58      	subs	r0, r3, #1
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6859      	ldr	r1, [r3, #4]
 8002138:	460b      	mov	r3, r1
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	440b      	add	r3, r1
 800213e:	0099      	lsls	r1, r3, #2
 8002140:	440b      	add	r3, r1
 8002142:	fbb0 f3f3 	udiv	r3, r0, r3
 8002146:	3301      	adds	r3, #1
 8002148:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800214c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002150:	6879      	ldr	r1, [r7, #4]
 8002152:	6809      	ldr	r1, [r1, #0]
 8002154:	4313      	orrs	r3, r2
 8002156:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	69da      	ldr	r2, [r3, #28]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a1b      	ldr	r3, [r3, #32]
 800216a:	431a      	orrs	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	430a      	orrs	r2, r1
 8002172:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800217e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	6911      	ldr	r1, [r2, #16]
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	68d2      	ldr	r2, [r2, #12]
 800218a:	4311      	orrs	r1, r2
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	6812      	ldr	r2, [r2, #0]
 8002190:	430b      	orrs	r3, r1
 8002192:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	695a      	ldr	r2, [r3, #20]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	431a      	orrs	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	430a      	orrs	r2, r1
 80021ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f042 0201 	orr.w	r2, r2, #1
 80021be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2220      	movs	r2, #32
 80021ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	000186a0 	.word	0x000186a0
 80021ec:	001e847f 	.word	0x001e847f
 80021f0:	003d08ff 	.word	0x003d08ff
 80021f4:	431bde83 	.word	0x431bde83
 80021f8:	10624dd3 	.word	0x10624dd3

080021fc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b088      	sub	sp, #32
 8002200:	af02      	add	r7, sp, #8
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	607a      	str	r2, [r7, #4]
 8002206:	461a      	mov	r2, r3
 8002208:	460b      	mov	r3, r1
 800220a:	817b      	strh	r3, [r7, #10]
 800220c:	4613      	mov	r3, r2
 800220e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002210:	f7fe ffc2 	bl	8001198 <HAL_GetTick>
 8002214:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b20      	cmp	r3, #32
 8002220:	f040 80e0 	bne.w	80023e4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	9300      	str	r3, [sp, #0]
 8002228:	2319      	movs	r3, #25
 800222a:	2201      	movs	r2, #1
 800222c:	4970      	ldr	r1, [pc, #448]	; (80023f0 <HAL_I2C_Master_Transmit+0x1f4>)
 800222e:	68f8      	ldr	r0, [r7, #12]
 8002230:	f000 f964 	bl	80024fc <I2C_WaitOnFlagUntilTimeout>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800223a:	2302      	movs	r3, #2
 800223c:	e0d3      	b.n	80023e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002244:	2b01      	cmp	r3, #1
 8002246:	d101      	bne.n	800224c <HAL_I2C_Master_Transmit+0x50>
 8002248:	2302      	movs	r3, #2
 800224a:	e0cc      	b.n	80023e6 <HAL_I2C_Master_Transmit+0x1ea>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b01      	cmp	r3, #1
 8002260:	d007      	beq.n	8002272 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f042 0201 	orr.w	r2, r2, #1
 8002270:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002280:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2221      	movs	r2, #33	; 0x21
 8002286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2210      	movs	r2, #16
 800228e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2200      	movs	r2, #0
 8002296:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	893a      	ldrh	r2, [r7, #8]
 80022a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	4a50      	ldr	r2, [pc, #320]	; (80023f4 <HAL_I2C_Master_Transmit+0x1f8>)
 80022b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80022b4:	8979      	ldrh	r1, [r7, #10]
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	6a3a      	ldr	r2, [r7, #32]
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f000 f89c 	bl	80023f8 <I2C_MasterRequestWrite>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e08d      	b.n	80023e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ca:	2300      	movs	r3, #0
 80022cc:	613b      	str	r3, [r7, #16]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	695b      	ldr	r3, [r3, #20]
 80022d4:	613b      	str	r3, [r7, #16]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	613b      	str	r3, [r7, #16]
 80022de:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80022e0:	e066      	b.n	80023b0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	6a39      	ldr	r1, [r7, #32]
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f000 fa22 	bl	8002730 <I2C_WaitOnTXEFlagUntilTimeout>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d00d      	beq.n	800230e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f6:	2b04      	cmp	r3, #4
 80022f8:	d107      	bne.n	800230a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002308:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e06b      	b.n	80023e6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002312:	781a      	ldrb	r2, [r3, #0]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231e:	1c5a      	adds	r2, r3, #1
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002328:	b29b      	uxth	r3, r3
 800232a:	3b01      	subs	r3, #1
 800232c:	b29a      	uxth	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002336:	3b01      	subs	r3, #1
 8002338:	b29a      	uxth	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	695b      	ldr	r3, [r3, #20]
 8002344:	f003 0304 	and.w	r3, r3, #4
 8002348:	2b04      	cmp	r3, #4
 800234a:	d11b      	bne.n	8002384 <HAL_I2C_Master_Transmit+0x188>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002350:	2b00      	cmp	r3, #0
 8002352:	d017      	beq.n	8002384 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002358:	781a      	ldrb	r2, [r3, #0]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002364:	1c5a      	adds	r2, r3, #1
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800236e:	b29b      	uxth	r3, r3
 8002370:	3b01      	subs	r3, #1
 8002372:	b29a      	uxth	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800237c:	3b01      	subs	r3, #1
 800237e:	b29a      	uxth	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002384:	697a      	ldr	r2, [r7, #20]
 8002386:	6a39      	ldr	r1, [r7, #32]
 8002388:	68f8      	ldr	r0, [r7, #12]
 800238a:	f000 fa19 	bl	80027c0 <I2C_WaitOnBTFFlagUntilTimeout>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00d      	beq.n	80023b0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002398:	2b04      	cmp	r3, #4
 800239a:	d107      	bne.n	80023ac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023aa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e01a      	b.n	80023e6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d194      	bne.n	80022e2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2220      	movs	r2, #32
 80023cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80023e0:	2300      	movs	r3, #0
 80023e2:	e000      	b.n	80023e6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80023e4:	2302      	movs	r3, #2
  }
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3718      	adds	r7, #24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	00100002 	.word	0x00100002
 80023f4:	ffff0000 	.word	0xffff0000

080023f8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b088      	sub	sp, #32
 80023fc:	af02      	add	r7, sp, #8
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	607a      	str	r2, [r7, #4]
 8002402:	603b      	str	r3, [r7, #0]
 8002404:	460b      	mov	r3, r1
 8002406:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	2b08      	cmp	r3, #8
 8002412:	d006      	beq.n	8002422 <I2C_MasterRequestWrite+0x2a>
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d003      	beq.n	8002422 <I2C_MasterRequestWrite+0x2a>
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002420:	d108      	bne.n	8002434 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002430:	601a      	str	r2, [r3, #0]
 8002432:	e00b      	b.n	800244c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002438:	2b12      	cmp	r3, #18
 800243a:	d107      	bne.n	800244c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800244a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002458:	68f8      	ldr	r0, [r7, #12]
 800245a:	f000 f84f 	bl	80024fc <I2C_WaitOnFlagUntilTimeout>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00d      	beq.n	8002480 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800246e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002472:	d103      	bne.n	800247c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f44f 7200 	mov.w	r2, #512	; 0x200
 800247a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e035      	b.n	80024ec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002488:	d108      	bne.n	800249c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800248a:	897b      	ldrh	r3, [r7, #10]
 800248c:	b2db      	uxtb	r3, r3
 800248e:	461a      	mov	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002498:	611a      	str	r2, [r3, #16]
 800249a:	e01b      	b.n	80024d4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800249c:	897b      	ldrh	r3, [r7, #10]
 800249e:	11db      	asrs	r3, r3, #7
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	f003 0306 	and.w	r3, r3, #6
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	f063 030f 	orn	r3, r3, #15
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	490e      	ldr	r1, [pc, #56]	; (80024f4 <I2C_MasterRequestWrite+0xfc>)
 80024ba:	68f8      	ldr	r0, [r7, #12]
 80024bc:	f000 f898 	bl	80025f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e010      	b.n	80024ec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80024ca:	897b      	ldrh	r3, [r7, #10]
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	4907      	ldr	r1, [pc, #28]	; (80024f8 <I2C_MasterRequestWrite+0x100>)
 80024da:	68f8      	ldr	r0, [r7, #12]
 80024dc:	f000 f888 	bl	80025f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e000      	b.n	80024ec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3718      	adds	r7, #24
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	00010008 	.word	0x00010008
 80024f8:	00010002 	.word	0x00010002

080024fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	603b      	str	r3, [r7, #0]
 8002508:	4613      	mov	r3, r2
 800250a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800250c:	e048      	b.n	80025a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002514:	d044      	beq.n	80025a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002516:	f7fe fe3f 	bl	8001198 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	429a      	cmp	r2, r3
 8002524:	d302      	bcc.n	800252c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d139      	bne.n	80025a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	0c1b      	lsrs	r3, r3, #16
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b01      	cmp	r3, #1
 8002534:	d10d      	bne.n	8002552 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	695b      	ldr	r3, [r3, #20]
 800253c:	43da      	mvns	r2, r3
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	4013      	ands	r3, r2
 8002542:	b29b      	uxth	r3, r3
 8002544:	2b00      	cmp	r3, #0
 8002546:	bf0c      	ite	eq
 8002548:	2301      	moveq	r3, #1
 800254a:	2300      	movne	r3, #0
 800254c:	b2db      	uxtb	r3, r3
 800254e:	461a      	mov	r2, r3
 8002550:	e00c      	b.n	800256c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	43da      	mvns	r2, r3
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	4013      	ands	r3, r2
 800255e:	b29b      	uxth	r3, r3
 8002560:	2b00      	cmp	r3, #0
 8002562:	bf0c      	ite	eq
 8002564:	2301      	moveq	r3, #1
 8002566:	2300      	movne	r3, #0
 8002568:	b2db      	uxtb	r3, r3
 800256a:	461a      	mov	r2, r3
 800256c:	79fb      	ldrb	r3, [r7, #7]
 800256e:	429a      	cmp	r2, r3
 8002570:	d116      	bne.n	80025a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2200      	movs	r2, #0
 8002576:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2220      	movs	r2, #32
 800257c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258c:	f043 0220 	orr.w	r2, r3, #32
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e023      	b.n	80025e8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	0c1b      	lsrs	r3, r3, #16
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d10d      	bne.n	80025c6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	695b      	ldr	r3, [r3, #20]
 80025b0:	43da      	mvns	r2, r3
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	4013      	ands	r3, r2
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	bf0c      	ite	eq
 80025bc:	2301      	moveq	r3, #1
 80025be:	2300      	movne	r3, #0
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	461a      	mov	r2, r3
 80025c4:	e00c      	b.n	80025e0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	43da      	mvns	r2, r3
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	4013      	ands	r3, r2
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	bf0c      	ite	eq
 80025d8:	2301      	moveq	r3, #1
 80025da:	2300      	movne	r3, #0
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	461a      	mov	r2, r3
 80025e0:	79fb      	ldrb	r3, [r7, #7]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d093      	beq.n	800250e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3710      	adds	r7, #16
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
 80025fc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025fe:	e071      	b.n	80026e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800260a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800260e:	d123      	bne.n	8002658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800261e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002628:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2200      	movs	r2, #0
 800262e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2220      	movs	r2, #32
 8002634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002644:	f043 0204 	orr.w	r2, r3, #4
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e067      	b.n	8002728 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800265e:	d041      	beq.n	80026e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002660:	f7fe fd9a 	bl	8001198 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	429a      	cmp	r2, r3
 800266e:	d302      	bcc.n	8002676 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d136      	bne.n	80026e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	0c1b      	lsrs	r3, r3, #16
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b01      	cmp	r3, #1
 800267e:	d10c      	bne.n	800269a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	43da      	mvns	r2, r3
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	4013      	ands	r3, r2
 800268c:	b29b      	uxth	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	bf14      	ite	ne
 8002692:	2301      	movne	r3, #1
 8002694:	2300      	moveq	r3, #0
 8002696:	b2db      	uxtb	r3, r3
 8002698:	e00b      	b.n	80026b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	43da      	mvns	r2, r3
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	4013      	ands	r3, r2
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	bf14      	ite	ne
 80026ac:	2301      	movne	r3, #1
 80026ae:	2300      	moveq	r3, #0
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d016      	beq.n	80026e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2220      	movs	r2, #32
 80026c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d0:	f043 0220 	orr.w	r2, r3, #32
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e021      	b.n	8002728 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	0c1b      	lsrs	r3, r3, #16
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d10c      	bne.n	8002708 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	695b      	ldr	r3, [r3, #20]
 80026f4:	43da      	mvns	r2, r3
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	4013      	ands	r3, r2
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	bf14      	ite	ne
 8002700:	2301      	movne	r3, #1
 8002702:	2300      	moveq	r3, #0
 8002704:	b2db      	uxtb	r3, r3
 8002706:	e00b      	b.n	8002720 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	43da      	mvns	r2, r3
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	4013      	ands	r3, r2
 8002714:	b29b      	uxth	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	bf14      	ite	ne
 800271a:	2301      	movne	r3, #1
 800271c:	2300      	moveq	r3, #0
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2b00      	cmp	r3, #0
 8002722:	f47f af6d 	bne.w	8002600 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800273c:	e034      	b.n	80027a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800273e:	68f8      	ldr	r0, [r7, #12]
 8002740:	f000 f886 	bl	8002850 <I2C_IsAcknowledgeFailed>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e034      	b.n	80027b8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002754:	d028      	beq.n	80027a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002756:	f7fe fd1f 	bl	8001198 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	68ba      	ldr	r2, [r7, #8]
 8002762:	429a      	cmp	r2, r3
 8002764:	d302      	bcc.n	800276c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d11d      	bne.n	80027a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002776:	2b80      	cmp	r3, #128	; 0x80
 8002778:	d016      	beq.n	80027a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2220      	movs	r2, #32
 8002784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002794:	f043 0220 	orr.w	r2, r3, #32
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e007      	b.n	80027b8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b2:	2b80      	cmp	r3, #128	; 0x80
 80027b4:	d1c3      	bne.n	800273e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3710      	adds	r7, #16
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027cc:	e034      	b.n	8002838 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027ce:	68f8      	ldr	r0, [r7, #12]
 80027d0:	f000 f83e 	bl	8002850 <I2C_IsAcknowledgeFailed>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e034      	b.n	8002848 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e4:	d028      	beq.n	8002838 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027e6:	f7fe fcd7 	bl	8001198 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	68ba      	ldr	r2, [r7, #8]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d302      	bcc.n	80027fc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d11d      	bne.n	8002838 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	f003 0304 	and.w	r3, r3, #4
 8002806:	2b04      	cmp	r3, #4
 8002808:	d016      	beq.n	8002838 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2220      	movs	r2, #32
 8002814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002824:	f043 0220 	orr.w	r2, r3, #32
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e007      	b.n	8002848 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	f003 0304 	and.w	r3, r3, #4
 8002842:	2b04      	cmp	r3, #4
 8002844:	d1c3      	bne.n	80027ce <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3710      	adds	r7, #16
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002866:	d11b      	bne.n	80028a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002870:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2220      	movs	r2, #32
 800287c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288c:	f043 0204 	orr.w	r2, r3, #4
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e000      	b.n	80028a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
	...

080028b0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b088      	sub	sp, #32
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e0e1      	b.n	8002a86 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d109      	bne.n	80028e2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a6d      	ldr	r2, [pc, #436]	; (8002a90 <HAL_I2S_Init+0x1e0>)
 80028da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f7fe f99f 	bl	8000c20 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2202      	movs	r2, #2
 80028e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	69db      	ldr	r3, [r3, #28]
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6812      	ldr	r2, [r2, #0]
 80028f4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80028f8:	f023 030f 	bic.w	r3, r3, #15
 80028fc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2202      	movs	r2, #2
 8002904:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	2b02      	cmp	r3, #2
 800290c:	d06f      	beq.n	80029ee <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d102      	bne.n	800291c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002916:	2310      	movs	r3, #16
 8002918:	617b      	str	r3, [r7, #20]
 800291a:	e001      	b.n	8002920 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800291c:	2320      	movs	r3, #32
 800291e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	2b20      	cmp	r3, #32
 8002926:	d802      	bhi.n	800292e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a58      	ldr	r2, [pc, #352]	; (8002a94 <HAL_I2S_Init+0x1e4>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d004      	beq.n	8002942 <HAL_I2S_Init+0x92>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a56      	ldr	r2, [pc, #344]	; (8002a98 <HAL_I2S_Init+0x1e8>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d104      	bne.n	800294c <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8002942:	2001      	movs	r0, #1
 8002944:	f000 fdf6 	bl	8003534 <HAL_RCCEx_GetPeriphCLKFreq>
 8002948:	60f8      	str	r0, [r7, #12]
 800294a:	e003      	b.n	8002954 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 800294c:	2002      	movs	r0, #2
 800294e:	f000 fdf1 	bl	8003534 <HAL_RCCEx_GetPeriphCLKFreq>
 8002952:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800295c:	d125      	bne.n	80029aa <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d010      	beq.n	8002988 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002970:	4613      	mov	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	461a      	mov	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002982:	3305      	adds	r3, #5
 8002984:	613b      	str	r3, [r7, #16]
 8002986:	e01f      	b.n	80029c8 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002992:	4613      	mov	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4413      	add	r3, r2
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	461a      	mov	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	695b      	ldr	r3, [r3, #20]
 80029a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a4:	3305      	adds	r3, #5
 80029a6:	613b      	str	r3, [r7, #16]
 80029a8:	e00e      	b.n	80029c8 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80029b2:	4613      	mov	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	4413      	add	r3, r2
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	461a      	mov	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	695b      	ldr	r3, [r3, #20]
 80029c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c4:	3305      	adds	r3, #5
 80029c6:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	4a34      	ldr	r2, [pc, #208]	; (8002a9c <HAL_I2S_Init+0x1ec>)
 80029cc:	fba2 2303 	umull	r2, r3, r2, r3
 80029d0:	08db      	lsrs	r3, r3, #3
 80029d2:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	085b      	lsrs	r3, r3, #1
 80029e4:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	021b      	lsls	r3, r3, #8
 80029ea:	61bb      	str	r3, [r7, #24]
 80029ec:	e003      	b.n	80029f6 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80029ee:	2302      	movs	r3, #2
 80029f0:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80029f2:	2300      	movs	r3, #0
 80029f4:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d902      	bls.n	8002a02 <HAL_I2S_Init+0x152>
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	2bff      	cmp	r3, #255	; 0xff
 8002a00:	d907      	bls.n	8002a12 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a06:	f043 0210 	orr.w	r2, r3, #16
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e039      	b.n	8002a86 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	691a      	ldr	r2, [r3, #16]
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	ea42 0103 	orr.w	r1, r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	69fa      	ldr	r2, [r7, #28]
 8002a22:	430a      	orrs	r2, r1
 8002a24:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	69db      	ldr	r3, [r3, #28]
 8002a2c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002a30:	f023 030f 	bic.w	r3, r3, #15
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	6851      	ldr	r1, [r2, #4]
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	6892      	ldr	r2, [r2, #8]
 8002a3c:	4311      	orrs	r1, r2
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	68d2      	ldr	r2, [r2, #12]
 8002a42:	4311      	orrs	r1, r2
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	6992      	ldr	r2, [r2, #24]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a54:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	2b30      	cmp	r3, #48	; 0x30
 8002a5c:	d003      	beq.n	8002a66 <HAL_I2S_Init+0x1b6>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	2bb0      	cmp	r3, #176	; 0xb0
 8002a64:	d107      	bne.n	8002a76 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	69da      	ldr	r2, [r3, #28]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002a74:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3720      	adds	r7, #32
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	08002b97 	.word	0x08002b97
 8002a94:	40003800 	.word	0x40003800
 8002a98:	40003c00 	.word	0x40003c00
 8002a9c:	cccccccd 	.word	0xcccccccd

08002aa0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae8:	881a      	ldrh	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af4:	1c9a      	adds	r2, r3, #2
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	3b01      	subs	r3, #1
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d10e      	bne.n	8002b30 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b20:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f7ff ffb8 	bl	8002aa0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002b30:	bf00      	nop
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68da      	ldr	r2, [r3, #12]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4a:	b292      	uxth	r2, r2
 8002b4c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b52:	1c9a      	adds	r2, r3, #2
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d10e      	bne.n	8002b8e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	685a      	ldr	r2, [r3, #4]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b7e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f7ff ff93 	bl	8002ab4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002b8e:	bf00      	nop
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b086      	sub	sp, #24
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	d13a      	bne.n	8002c28 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d109      	bne.n	8002bd0 <I2S_IRQHandler+0x3a>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc6:	2b40      	cmp	r3, #64	; 0x40
 8002bc8:	d102      	bne.n	8002bd0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f7ff ffb4 	bl	8002b38 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd6:	2b40      	cmp	r3, #64	; 0x40
 8002bd8:	d126      	bne.n	8002c28 <I2S_IRQHandler+0x92>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f003 0320 	and.w	r3, r3, #32
 8002be4:	2b20      	cmp	r3, #32
 8002be6:	d11f      	bne.n	8002c28 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	685a      	ldr	r2, [r3, #4]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002bf6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	613b      	str	r3, [r7, #16]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	613b      	str	r3, [r7, #16]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	613b      	str	r3, [r7, #16]
 8002c0c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1a:	f043 0202 	orr.w	r2, r3, #2
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f7ff ff50 	bl	8002ac8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	2b03      	cmp	r3, #3
 8002c32:	d136      	bne.n	8002ca2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d109      	bne.n	8002c52 <I2S_IRQHandler+0xbc>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c48:	2b80      	cmp	r3, #128	; 0x80
 8002c4a:	d102      	bne.n	8002c52 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f7ff ff45 	bl	8002adc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	f003 0308 	and.w	r3, r3, #8
 8002c58:	2b08      	cmp	r3, #8
 8002c5a:	d122      	bne.n	8002ca2 <I2S_IRQHandler+0x10c>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f003 0320 	and.w	r3, r3, #32
 8002c66:	2b20      	cmp	r3, #32
 8002c68:	d11b      	bne.n	8002ca2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	685a      	ldr	r2, [r3, #4]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c78:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60fb      	str	r3, [r7, #12]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	60fb      	str	r3, [r7, #12]
 8002c86:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c94:	f043 0204 	orr.w	r2, r3, #4
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f7ff ff13 	bl	8002ac8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002ca2:	bf00      	nop
 8002ca4:	3718      	adds	r7, #24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
	...

08002cac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d101      	bne.n	8002cc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e0cc      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cc0:	4b68      	ldr	r3, [pc, #416]	; (8002e64 <HAL_RCC_ClockConfig+0x1b8>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 030f 	and.w	r3, r3, #15
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d90c      	bls.n	8002ce8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cce:	4b65      	ldr	r3, [pc, #404]	; (8002e64 <HAL_RCC_ClockConfig+0x1b8>)
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	b2d2      	uxtb	r2, r2
 8002cd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd6:	4b63      	ldr	r3, [pc, #396]	; (8002e64 <HAL_RCC_ClockConfig+0x1b8>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 030f 	and.w	r3, r3, #15
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d001      	beq.n	8002ce8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e0b8      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d020      	beq.n	8002d36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0304 	and.w	r3, r3, #4
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d005      	beq.n	8002d0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d00:	4b59      	ldr	r3, [pc, #356]	; (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	4a58      	ldr	r2, [pc, #352]	; (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d0a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0308 	and.w	r3, r3, #8
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d005      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d18:	4b53      	ldr	r3, [pc, #332]	; (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	4a52      	ldr	r2, [pc, #328]	; (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d24:	4b50      	ldr	r3, [pc, #320]	; (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	494d      	ldr	r1, [pc, #308]	; (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d044      	beq.n	8002dcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d107      	bne.n	8002d5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d4a:	4b47      	ldr	r3, [pc, #284]	; (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d119      	bne.n	8002d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e07f      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d003      	beq.n	8002d6a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d66:	2b03      	cmp	r3, #3
 8002d68:	d107      	bne.n	8002d7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d6a:	4b3f      	ldr	r3, [pc, #252]	; (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d109      	bne.n	8002d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e06f      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d7a:	4b3b      	ldr	r3, [pc, #236]	; (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e067      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d8a:	4b37      	ldr	r3, [pc, #220]	; (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f023 0203 	bic.w	r2, r3, #3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	4934      	ldr	r1, [pc, #208]	; (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d9c:	f7fe f9fc 	bl	8001198 <HAL_GetTick>
 8002da0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002da2:	e00a      	b.n	8002dba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002da4:	f7fe f9f8 	bl	8001198 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e04f      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dba:	4b2b      	ldr	r3, [pc, #172]	; (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f003 020c 	and.w	r2, r3, #12
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d1eb      	bne.n	8002da4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dcc:	4b25      	ldr	r3, [pc, #148]	; (8002e64 <HAL_RCC_ClockConfig+0x1b8>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 030f 	and.w	r3, r3, #15
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d20c      	bcs.n	8002df4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dda:	4b22      	ldr	r3, [pc, #136]	; (8002e64 <HAL_RCC_ClockConfig+0x1b8>)
 8002ddc:	683a      	ldr	r2, [r7, #0]
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002de2:	4b20      	ldr	r3, [pc, #128]	; (8002e64 <HAL_RCC_ClockConfig+0x1b8>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 030f 	and.w	r3, r3, #15
 8002dea:	683a      	ldr	r2, [r7, #0]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d001      	beq.n	8002df4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e032      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d008      	beq.n	8002e12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e00:	4b19      	ldr	r3, [pc, #100]	; (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	4916      	ldr	r1, [pc, #88]	; (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0308 	and.w	r3, r3, #8
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d009      	beq.n	8002e32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e1e:	4b12      	ldr	r3, [pc, #72]	; (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	490e      	ldr	r1, [pc, #56]	; (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e32:	f000 fdc9 	bl	80039c8 <HAL_RCC_GetSysClockFreq>
 8002e36:	4602      	mov	r2, r0
 8002e38:	4b0b      	ldr	r3, [pc, #44]	; (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	091b      	lsrs	r3, r3, #4
 8002e3e:	f003 030f 	and.w	r3, r3, #15
 8002e42:	490a      	ldr	r1, [pc, #40]	; (8002e6c <HAL_RCC_ClockConfig+0x1c0>)
 8002e44:	5ccb      	ldrb	r3, [r1, r3]
 8002e46:	fa22 f303 	lsr.w	r3, r2, r3
 8002e4a:	4a09      	ldr	r2, [pc, #36]	; (8002e70 <HAL_RCC_ClockConfig+0x1c4>)
 8002e4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002e4e:	4b09      	ldr	r3, [pc, #36]	; (8002e74 <HAL_RCC_ClockConfig+0x1c8>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fe f95c 	bl	8001110 <HAL_InitTick>

  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	40023c00 	.word	0x40023c00
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	08005404 	.word	0x08005404
 8002e70:	20000000 	.word	0x20000000
 8002e74:	20000004 	.word	0x20000004

08002e78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e7c:	4b03      	ldr	r3, [pc, #12]	; (8002e8c <HAL_RCC_GetHCLKFreq+0x14>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	20000000 	.word	0x20000000

08002e90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e94:	f7ff fff0 	bl	8002e78 <HAL_RCC_GetHCLKFreq>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	4b05      	ldr	r3, [pc, #20]	; (8002eb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	0a9b      	lsrs	r3, r3, #10
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	4903      	ldr	r1, [pc, #12]	; (8002eb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ea6:	5ccb      	ldrb	r3, [r1, r3]
 8002ea8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	08005414 	.word	0x08005414

08002eb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ebc:	f7ff ffdc 	bl	8002e78 <HAL_RCC_GetHCLKFreq>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	4b05      	ldr	r3, [pc, #20]	; (8002ed8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	0b5b      	lsrs	r3, r3, #13
 8002ec8:	f003 0307 	and.w	r3, r3, #7
 8002ecc:	4903      	ldr	r1, [pc, #12]	; (8002edc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ece:	5ccb      	ldrb	r3, [r1, r3]
 8002ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	08005414 	.word	0x08005414

08002ee0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b08c      	sub	sp, #48	; 0x30
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002eec:	2300      	movs	r3, #0
 8002eee:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002efc:	2300      	movs	r3, #0
 8002efe:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002f00:	2300      	movs	r3, #0
 8002f02:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002f04:	2300      	movs	r3, #0
 8002f06:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d010      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002f18:	4b6f      	ldr	r3, [pc, #444]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f1e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f26:	496c      	ldr	r1, [pc, #432]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002f36:	2301      	movs	r3, #1
 8002f38:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d010      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002f46:	4b64      	ldr	r3, [pc, #400]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f4c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f54:	4960      	ldr	r1, [pc, #384]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002f64:	2301      	movs	r3, #1
 8002f66:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0304 	and.w	r3, r3, #4
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d017      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f74:	4b58      	ldr	r3, [pc, #352]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	4955      	ldr	r1, [pc, #340]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f92:	d101      	bne.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002f94:	2301      	movs	r3, #1
 8002f96:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d101      	bne.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0308 	and.w	r3, r3, #8
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d017      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002fb0:	4b49      	ldr	r3, [pc, #292]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002fb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fb6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fbe:	4946      	ldr	r1, [pc, #280]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fce:	d101      	bne.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0320 	and.w	r3, r3, #32
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f000 808a 	beq.w	8003102 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002fee:	2300      	movs	r3, #0
 8002ff0:	60bb      	str	r3, [r7, #8]
 8002ff2:	4b39      	ldr	r3, [pc, #228]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	4a38      	ldr	r2, [pc, #224]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ffe:	4b36      	ldr	r3, [pc, #216]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003006:	60bb      	str	r3, [r7, #8]
 8003008:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800300a:	4b34      	ldr	r3, [pc, #208]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a33      	ldr	r2, [pc, #204]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003014:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003016:	f7fe f8bf 	bl	8001198 <HAL_GetTick>
 800301a:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800301c:	e008      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800301e:	f7fe f8bb 	bl	8001198 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d901      	bls.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e278      	b.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003030:	4b2a      	ldr	r3, [pc, #168]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003038:	2b00      	cmp	r3, #0
 800303a:	d0f0      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800303c:	4b26      	ldr	r3, [pc, #152]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800303e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003040:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003044:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003046:	6a3b      	ldr	r3, [r7, #32]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d02f      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003050:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003054:	6a3a      	ldr	r2, [r7, #32]
 8003056:	429a      	cmp	r2, r3
 8003058:	d028      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800305a:	4b1f      	ldr	r3, [pc, #124]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800305c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800305e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003062:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003064:	4b1e      	ldr	r3, [pc, #120]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003066:	2201      	movs	r2, #1
 8003068:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800306a:	4b1d      	ldr	r3, [pc, #116]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800306c:	2200      	movs	r2, #0
 800306e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003070:	4a19      	ldr	r2, [pc, #100]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003072:	6a3b      	ldr	r3, [r7, #32]
 8003074:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003076:	4b18      	ldr	r3, [pc, #96]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	2b01      	cmp	r3, #1
 8003080:	d114      	bne.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003082:	f7fe f889 	bl	8001198 <HAL_GetTick>
 8003086:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003088:	e00a      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800308a:	f7fe f885 	bl	8001198 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	f241 3288 	movw	r2, #5000	; 0x1388
 8003098:	4293      	cmp	r3, r2
 800309a:	d901      	bls.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e240      	b.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030a0:	4b0d      	ldr	r3, [pc, #52]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80030a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d0ee      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030b8:	d114      	bne.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80030ba:	4b07      	ldr	r3, [pc, #28]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80030ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030ce:	4902      	ldr	r1, [pc, #8]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	608b      	str	r3, [r1, #8]
 80030d4:	e00c      	b.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80030d6:	bf00      	nop
 80030d8:	40023800 	.word	0x40023800
 80030dc:	40007000 	.word	0x40007000
 80030e0:	42470e40 	.word	0x42470e40
 80030e4:	4b4a      	ldr	r3, [pc, #296]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	4a49      	ldr	r2, [pc, #292]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030ea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80030ee:	6093      	str	r3, [r2, #8]
 80030f0:	4b47      	ldr	r3, [pc, #284]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030fc:	4944      	ldr	r1, [pc, #272]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0310 	and.w	r3, r3, #16
 800310a:	2b00      	cmp	r3, #0
 800310c:	d004      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003114:	4b3f      	ldr	r3, [pc, #252]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003116:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00a      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003124:	4b3a      	ldr	r3, [pc, #232]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003126:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800312a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003132:	4937      	ldr	r1, [pc, #220]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003134:	4313      	orrs	r3, r2
 8003136:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00a      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003146:	4b32      	ldr	r3, [pc, #200]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003148:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800314c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003154:	492e      	ldr	r1, [pc, #184]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003156:	4313      	orrs	r3, r2
 8003158:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003164:	2b00      	cmp	r3, #0
 8003166:	d011      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003168:	4b29      	ldr	r3, [pc, #164]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800316a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800316e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003176:	4926      	ldr	r1, [pc, #152]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003178:	4313      	orrs	r3, r2
 800317a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003182:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003186:	d101      	bne.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003188:	2301      	movs	r3, #1
 800318a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00a      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003198:	4b1d      	ldr	r3, [pc, #116]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800319a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800319e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a6:	491a      	ldr	r1, [pc, #104]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d011      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80031ba:	4b15      	ldr	r3, [pc, #84]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80031bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031c0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031c8:	4911      	ldr	r1, [pc, #68]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031d8:	d101      	bne.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80031da:	2301      	movs	r3, #1
 80031dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80031de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d005      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031ec:	f040 80ff 	bne.w	80033ee <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80031f0:	4b09      	ldr	r3, [pc, #36]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80031f6:	f7fd ffcf 	bl	8001198 <HAL_GetTick>
 80031fa:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80031fc:	e00e      	b.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80031fe:	f7fd ffcb 	bl	8001198 <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d907      	bls.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e188      	b.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003210:	40023800 	.word	0x40023800
 8003214:	424711e0 	.word	0x424711e0
 8003218:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800321c:	4b7e      	ldr	r3, [pc, #504]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d1ea      	bne.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0301 	and.w	r3, r3, #1
 8003230:	2b00      	cmp	r3, #0
 8003232:	d003      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003238:	2b00      	cmp	r3, #0
 800323a:	d009      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003244:	2b00      	cmp	r3, #0
 8003246:	d028      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800324c:	2b00      	cmp	r3, #0
 800324e:	d124      	bne.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003250:	4b71      	ldr	r3, [pc, #452]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003252:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003256:	0c1b      	lsrs	r3, r3, #16
 8003258:	f003 0303 	and.w	r3, r3, #3
 800325c:	3301      	adds	r3, #1
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003262:	4b6d      	ldr	r3, [pc, #436]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003264:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003268:	0e1b      	lsrs	r3, r3, #24
 800326a:	f003 030f 	and.w	r3, r3, #15
 800326e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685a      	ldr	r2, [r3, #4]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	019b      	lsls	r3, r3, #6
 800327a:	431a      	orrs	r2, r3
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	085b      	lsrs	r3, r3, #1
 8003280:	3b01      	subs	r3, #1
 8003282:	041b      	lsls	r3, r3, #16
 8003284:	431a      	orrs	r2, r3
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	061b      	lsls	r3, r3, #24
 800328a:	431a      	orrs	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	695b      	ldr	r3, [r3, #20]
 8003290:	071b      	lsls	r3, r3, #28
 8003292:	4961      	ldr	r1, [pc, #388]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003294:	4313      	orrs	r3, r2
 8003296:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0304 	and.w	r3, r3, #4
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d004      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032ae:	d00a      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d035      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032c4:	d130      	bne.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80032c6:	4b54      	ldr	r3, [pc, #336]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80032c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032cc:	0c1b      	lsrs	r3, r3, #16
 80032ce:	f003 0303 	and.w	r3, r3, #3
 80032d2:	3301      	adds	r3, #1
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80032d8:	4b4f      	ldr	r3, [pc, #316]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80032da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032de:	0f1b      	lsrs	r3, r3, #28
 80032e0:	f003 0307 	and.w	r3, r3, #7
 80032e4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	019b      	lsls	r3, r3, #6
 80032f0:	431a      	orrs	r2, r3
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	085b      	lsrs	r3, r3, #1
 80032f6:	3b01      	subs	r3, #1
 80032f8:	041b      	lsls	r3, r3, #16
 80032fa:	431a      	orrs	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	061b      	lsls	r3, r3, #24
 8003302:	431a      	orrs	r2, r3
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	071b      	lsls	r3, r3, #28
 8003308:	4943      	ldr	r1, [pc, #268]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800330a:	4313      	orrs	r3, r2
 800330c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003310:	4b41      	ldr	r3, [pc, #260]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003312:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003316:	f023 021f 	bic.w	r2, r3, #31
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331e:	3b01      	subs	r3, #1
 8003320:	493d      	ldr	r1, [pc, #244]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003322:	4313      	orrs	r3, r2
 8003324:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003330:	2b00      	cmp	r3, #0
 8003332:	d029      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003338:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800333c:	d124      	bne.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800333e:	4b36      	ldr	r3, [pc, #216]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003340:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003344:	0c1b      	lsrs	r3, r3, #16
 8003346:	f003 0303 	and.w	r3, r3, #3
 800334a:	3301      	adds	r3, #1
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003350:	4b31      	ldr	r3, [pc, #196]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003352:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003356:	0f1b      	lsrs	r3, r3, #28
 8003358:	f003 0307 	and.w	r3, r3, #7
 800335c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	019b      	lsls	r3, r3, #6
 8003368:	431a      	orrs	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	085b      	lsrs	r3, r3, #1
 8003370:	3b01      	subs	r3, #1
 8003372:	041b      	lsls	r3, r3, #16
 8003374:	431a      	orrs	r2, r3
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	061b      	lsls	r3, r3, #24
 800337a:	431a      	orrs	r2, r3
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	071b      	lsls	r3, r3, #28
 8003380:	4925      	ldr	r1, [pc, #148]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003382:	4313      	orrs	r3, r2
 8003384:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003390:	2b00      	cmp	r3, #0
 8003392:	d016      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685a      	ldr	r2, [r3, #4]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	019b      	lsls	r3, r3, #6
 800339e:	431a      	orrs	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	085b      	lsrs	r3, r3, #1
 80033a6:	3b01      	subs	r3, #1
 80033a8:	041b      	lsls	r3, r3, #16
 80033aa:	431a      	orrs	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	061b      	lsls	r3, r3, #24
 80033b2:	431a      	orrs	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	695b      	ldr	r3, [r3, #20]
 80033b8:	071b      	lsls	r3, r3, #28
 80033ba:	4917      	ldr	r1, [pc, #92]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80033c2:	4b16      	ldr	r3, [pc, #88]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80033c4:	2201      	movs	r2, #1
 80033c6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80033c8:	f7fd fee6 	bl	8001198 <HAL_GetTick>
 80033cc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80033ce:	e008      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80033d0:	f7fd fee2 	bl	8001198 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e09f      	b.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80033e2:	4b0d      	ldr	r3, [pc, #52]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d0f0      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 80033ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	f040 8095 	bne.w	8003520 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80033f6:	4b0a      	ldr	r3, [pc, #40]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80033fc:	f7fd fecc 	bl	8001198 <HAL_GetTick>
 8003400:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003402:	e00f      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003404:	f7fd fec8 	bl	8001198 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b02      	cmp	r3, #2
 8003410:	d908      	bls.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e085      	b.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003416:	bf00      	nop
 8003418:	40023800 	.word	0x40023800
 800341c:	42470068 	.word	0x42470068
 8003420:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003424:	4b41      	ldr	r3, [pc, #260]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800342c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003430:	d0e8      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0304 	and.w	r3, r3, #4
 800343a:	2b00      	cmp	r3, #0
 800343c:	d003      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003442:	2b00      	cmp	r3, #0
 8003444:	d009      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800344e:	2b00      	cmp	r3, #0
 8003450:	d02b      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003456:	2b00      	cmp	r3, #0
 8003458:	d127      	bne.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800345a:	4b34      	ldr	r3, [pc, #208]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800345c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003460:	0c1b      	lsrs	r3, r3, #16
 8003462:	f003 0303 	and.w	r3, r3, #3
 8003466:	3301      	adds	r3, #1
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	699a      	ldr	r2, [r3, #24]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	69db      	ldr	r3, [r3, #28]
 8003474:	019b      	lsls	r3, r3, #6
 8003476:	431a      	orrs	r2, r3
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	085b      	lsrs	r3, r3, #1
 800347c:	3b01      	subs	r3, #1
 800347e:	041b      	lsls	r3, r3, #16
 8003480:	431a      	orrs	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003486:	061b      	lsls	r3, r3, #24
 8003488:	4928      	ldr	r1, [pc, #160]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800348a:	4313      	orrs	r3, r2
 800348c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003490:	4b26      	ldr	r3, [pc, #152]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003492:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003496:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349e:	3b01      	subs	r3, #1
 80034a0:	021b      	lsls	r3, r3, #8
 80034a2:	4922      	ldr	r1, [pc, #136]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d01d      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034be:	d118      	bne.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80034c0:	4b1a      	ldr	r3, [pc, #104]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80034c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c6:	0e1b      	lsrs	r3, r3, #24
 80034c8:	f003 030f 	and.w	r3, r3, #15
 80034cc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	699a      	ldr	r2, [r3, #24]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	69db      	ldr	r3, [r3, #28]
 80034d6:	019b      	lsls	r3, r3, #6
 80034d8:	431a      	orrs	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	085b      	lsrs	r3, r3, #1
 80034e0:	3b01      	subs	r3, #1
 80034e2:	041b      	lsls	r3, r3, #16
 80034e4:	431a      	orrs	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	061b      	lsls	r3, r3, #24
 80034ea:	4910      	ldr	r1, [pc, #64]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80034f2:	4b0f      	ldr	r3, [pc, #60]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80034f4:	2201      	movs	r2, #1
 80034f6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80034f8:	f7fd fe4e 	bl	8001198 <HAL_GetTick>
 80034fc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80034fe:	e008      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003500:	f7fd fe4a 	bl	8001198 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d901      	bls.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e007      	b.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003512:	4b06      	ldr	r3, [pc, #24]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800351a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800351e:	d1ef      	bne.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3730      	adds	r7, #48	; 0x30
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	40023800 	.word	0x40023800
 8003530:	42470070 	.word	0x42470070

08003534 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003534:	b480      	push	{r7}
 8003536:	b089      	sub	sp, #36	; 0x24
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 800353c:	2300      	movs	r3, #0
 800353e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003540:	2300      	movs	r3, #0
 8003542:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003544:	2300      	movs	r3, #0
 8003546:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 8003548:	2300      	movs	r3, #0
 800354a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800354c:	2300      	movs	r3, #0
 800354e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003550:	2300      	movs	r3, #0
 8003552:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	3b01      	subs	r3, #1
 8003558:	2b07      	cmp	r3, #7
 800355a:	f200 8224 	bhi.w	80039a6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800355e:	a201      	add	r2, pc, #4	; (adr r2, 8003564 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8003560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003564:	08003767 	.word	0x08003767
 8003568:	08003891 	.word	0x08003891
 800356c:	080039a7 	.word	0x080039a7
 8003570:	08003585 	.word	0x08003585
 8003574:	080039a7 	.word	0x080039a7
 8003578:	080039a7 	.word	0x080039a7
 800357c:	080039a7 	.word	0x080039a7
 8003580:	08003585 	.word	0x08003585
  {
    case RCC_PERIPHCLK_SAI1:
    case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 8003584:	4ba8      	ldr	r3, [pc, #672]	; (8003828 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003586:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800358a:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8003592:	613b      	str	r3, [r7, #16]
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800359a:	f000 80d6 	beq.w	800374a <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035a4:	f200 80dd 	bhi.w	8003762 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035ae:	f000 809f 	beq.w	80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035b8:	f200 80d3 	bhi.w	8003762 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035c2:	d05b      	beq.n	800367c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035ca:	f200 80ca 	bhi.w	8003762 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80035d4:	f000 80b6 	beq.w	8003744 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80035de:	f200 80c0 	bhi.w	8003762 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035e8:	f000 8082 	beq.w	80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035f2:	f200 80b6 	bhi.w	8003762 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d004      	beq.n	8003606 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003602:	d03b      	beq.n	800367c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
        default :
        {
          break;
 8003604:	e0ad      	b.n	8003762 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003606:	4b88      	ldr	r3, [pc, #544]	; (8003828 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d109      	bne.n	8003626 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 8003612:	4b85      	ldr	r3, [pc, #532]	; (8003828 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003618:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800361c:	4a83      	ldr	r2, [pc, #524]	; (800382c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800361e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003622:	61bb      	str	r3, [r7, #24]
 8003624:	e008      	b.n	8003638 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 8003626:	4b80      	ldr	r3, [pc, #512]	; (8003828 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800362c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003630:	4a7f      	ldr	r2, [pc, #508]	; (8003830 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003632:	fbb2 f3f3 	udiv	r3, r2, r3
 8003636:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8003638:	4b7b      	ldr	r3, [pc, #492]	; (8003828 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800363a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800363e:	0e1b      	lsrs	r3, r3, #24
 8003640:	f003 030f 	and.w	r3, r3, #15
 8003644:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U)) / (tmpreg1);
 8003646:	4b78      	ldr	r3, [pc, #480]	; (8003828 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800364c:	099b      	lsrs	r3, r3, #6
 800364e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003652:	69ba      	ldr	r2, [r7, #24]
 8003654:	fb03 f202 	mul.w	r2, r3, r2
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	fbb2 f3f3 	udiv	r3, r2, r3
 800365e:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8003660:	4b71      	ldr	r3, [pc, #452]	; (8003828 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003662:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003666:	0a1b      	lsrs	r3, r3, #8
 8003668:	f003 031f 	and.w	r3, r3, #31
 800366c:	3301      	adds	r3, #1
 800366e:	617b      	str	r3, [r7, #20]
          frequency = frequency / (tmpreg1);
 8003670:	69fa      	ldr	r2, [r7, #28]
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	fbb2 f3f3 	udiv	r3, r2, r3
 8003678:	61fb      	str	r3, [r7, #28]
          break;
 800367a:	e073      	b.n	8003764 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800367c:	4b6a      	ldr	r3, [pc, #424]	; (8003828 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d109      	bne.n	800369c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003688:	4b67      	ldr	r3, [pc, #412]	; (8003828 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800368a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800368e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003692:	4a66      	ldr	r2, [pc, #408]	; (800382c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003694:	fbb2 f3f3 	udiv	r3, r2, r3
 8003698:	61bb      	str	r3, [r7, #24]
 800369a:	e008      	b.n	80036ae <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 800369c:	4b62      	ldr	r3, [pc, #392]	; (8003828 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800369e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036a6:	4a62      	ldr	r2, [pc, #392]	; (8003830 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80036a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ac:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 80036ae:	4b5e      	ldr	r3, [pc, #376]	; (8003828 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80036b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036b4:	0e1b      	lsrs	r3, r3, #24
 80036b6:	f003 030f 	and.w	r3, r3, #15
 80036ba:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg1);
 80036bc:	4b5a      	ldr	r3, [pc, #360]	; (8003828 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80036be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036c2:	099b      	lsrs	r3, r3, #6
 80036c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	fb03 f202 	mul.w	r2, r3, r2
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d4:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 80036d6:	4b54      	ldr	r3, [pc, #336]	; (8003828 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80036d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036dc:	f003 031f 	and.w	r3, r3, #31
 80036e0:	3301      	adds	r3, #1
 80036e2:	617b      	str	r3, [r7, #20]
          frequency = frequency / (tmpreg1);
 80036e4:	69fa      	ldr	r2, [r7, #28]
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ec:	61fb      	str	r3, [r7, #28]
          break;
 80036ee:	e039      	b.n	8003764 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80036f0:	4b4d      	ldr	r3, [pc, #308]	; (8003828 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d108      	bne.n	800370e <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80036fc:	4b4a      	ldr	r3, [pc, #296]	; (8003828 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003704:	4a49      	ldr	r2, [pc, #292]	; (800382c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003706:	fbb2 f3f3 	udiv	r3, r2, r3
 800370a:	61bb      	str	r3, [r7, #24]
 800370c:	e007      	b.n	800371e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800370e:	4b46      	ldr	r3, [pc, #280]	; (8003828 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003716:	4a46      	ldr	r2, [pc, #280]	; (8003830 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003718:	fbb2 f3f3 	udiv	r3, r2, r3
 800371c:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 800371e:	4b42      	ldr	r3, [pc, #264]	; (8003828 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	0f1b      	lsrs	r3, r3, #28
 8003724:	f003 0307 	and.w	r3, r3, #7
 8003728:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U)) / (tmpreg1);
 800372a:	4b3f      	ldr	r3, [pc, #252]	; (8003828 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	099b      	lsrs	r3, r3, #6
 8003730:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	fb03 f202 	mul.w	r2, r3, r2
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003740:	61fb      	str	r3, [r7, #28]
          break;
 8003742:	e00f      	b.n	8003764 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 8003744:	4b3b      	ldr	r3, [pc, #236]	; (8003834 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8003746:	61fb      	str	r3, [r7, #28]
          break;
 8003748:	e00c      	b.n	8003764 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800374a:	4b37      	ldr	r3, [pc, #220]	; (8003828 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d102      	bne.n	800375c <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 8003756:	4b35      	ldr	r3, [pc, #212]	; (800382c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003758:	61fb      	str	r3, [r7, #28]
          break;
 800375a:	e003      	b.n	8003764 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 800375c:	4b34      	ldr	r3, [pc, #208]	; (8003830 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800375e:	61fb      	str	r3, [r7, #28]
          break;
 8003760:	e000      	b.n	8003764 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 8003762:	bf00      	nop
        }
      }
      break;
 8003764:	e120      	b.n	80039a8 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    }
    case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8003766:	4b30      	ldr	r3, [pc, #192]	; (8003828 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003768:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800376c:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8003770:	60fb      	str	r3, [r7, #12]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003778:	d079      	beq.n	800386e <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003780:	f200 8082 	bhi.w	8003888 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800378a:	d03c      	beq.n	8003806 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003792:	d879      	bhi.n	8003888 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d006      	beq.n	80037a8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037a0:	d172      	bne.n	8003888 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80037a2:	4b24      	ldr	r3, [pc, #144]	; (8003834 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80037a4:	61fb      	str	r3, [r7, #28]
          break;
 80037a6:	e072      	b.n	800388e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
        case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80037a8:	4b1f      	ldr	r3, [pc, #124]	; (8003828 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037b4:	d109      	bne.n	80037ca <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80037b6:	4b1c      	ldr	r3, [pc, #112]	; (8003828 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80037b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037c0:	4a1b      	ldr	r2, [pc, #108]	; (8003830 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80037c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c6:	61bb      	str	r3, [r7, #24]
 80037c8:	e008      	b.n	80037dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80037ca:	4b17      	ldr	r3, [pc, #92]	; (8003828 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80037cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037d4:	4a15      	ldr	r2, [pc, #84]	; (800382c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80037d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037da:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80037dc:	4b12      	ldr	r3, [pc, #72]	; (8003828 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80037de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037e2:	099b      	lsrs	r3, r3, #6
 80037e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	fb02 f303 	mul.w	r3, r2, r3
 80037ee:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80037f0:	4b0d      	ldr	r3, [pc, #52]	; (8003828 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80037f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037f6:	0f1b      	lsrs	r3, r3, #28
 80037f8:	f003 0307 	and.w	r3, r3, #7
 80037fc:	68ba      	ldr	r2, [r7, #8]
 80037fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003802:	61fb      	str	r3, [r7, #28]
          break;
 8003804:	e043      	b.n	800388e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
        case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003806:	4b08      	ldr	r3, [pc, #32]	; (8003828 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800380e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003812:	d111      	bne.n	8003838 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003814:	4b04      	ldr	r3, [pc, #16]	; (8003828 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800381c:	4a04      	ldr	r2, [pc, #16]	; (8003830 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800381e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003822:	61bb      	str	r3, [r7, #24]
 8003824:	e010      	b.n	8003848 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8003826:	bf00      	nop
 8003828:	40023800 	.word	0x40023800
 800382c:	00f42400 	.word	0x00f42400
 8003830:	007a1200 	.word	0x007a1200
 8003834:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003838:	4b5f      	ldr	r3, [pc, #380]	; (80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003840:	4a5e      	ldr	r2, [pc, #376]	; (80039bc <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003842:	fbb2 f3f3 	udiv	r3, r2, r3
 8003846:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8003848:	4b5b      	ldr	r3, [pc, #364]	; (80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	099b      	lsrs	r3, r3, #6
 800384e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	fb02 f303 	mul.w	r3, r2, r3
 8003858:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 800385a:	4b57      	ldr	r3, [pc, #348]	; (80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	0f1b      	lsrs	r3, r3, #28
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	68ba      	ldr	r2, [r7, #8]
 8003866:	fbb2 f3f3 	udiv	r3, r2, r3
 800386a:	61fb      	str	r3, [r7, #28]
          break;
 800386c:	e00f      	b.n	800388e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
        case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800386e:	4b52      	ldr	r3, [pc, #328]	; (80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003876:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800387a:	d102      	bne.n	8003882 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 800387c:	4b50      	ldr	r3, [pc, #320]	; (80039c0 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 800387e:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8003880:	e005      	b.n	800388e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 8003882:	4b4e      	ldr	r3, [pc, #312]	; (80039bc <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003884:	61fb      	str	r3, [r7, #28]
          break;
 8003886:	e002      	b.n	800388e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8003888:	2300      	movs	r3, #0
 800388a:	61fb      	str	r3, [r7, #28]
          break;
 800388c:	bf00      	nop
        }
      }
      break;
 800388e:	e08b      	b.n	80039a8 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    }
    case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8003890:	4b49      	ldr	r3, [pc, #292]	; (80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003892:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003896:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80038a2:	d06f      	beq.n	8003984 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80038aa:	d878      	bhi.n	800399e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038b2:	d03c      	beq.n	800392e <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038ba:	d870      	bhi.n	800399e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d006      	beq.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038c8:	d169      	bne.n	800399e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80038ca:	4b3e      	ldr	r3, [pc, #248]	; (80039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>)
 80038cc:	61fb      	str	r3, [r7, #28]
          break;
 80038ce:	e069      	b.n	80039a4 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
        case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80038d0:	4b39      	ldr	r3, [pc, #228]	; (80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038dc:	d109      	bne.n	80038f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80038de:	4b36      	ldr	r3, [pc, #216]	; (80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80038e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038e8:	4a35      	ldr	r2, [pc, #212]	; (80039c0 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 80038ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ee:	61bb      	str	r3, [r7, #24]
 80038f0:	e008      	b.n	8003904 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80038f2:	4b31      	ldr	r3, [pc, #196]	; (80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80038f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038fc:	4a2f      	ldr	r2, [pc, #188]	; (80039bc <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80038fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003902:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003904:	4b2c      	ldr	r3, [pc, #176]	; (80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003906:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800390a:	099b      	lsrs	r3, r3, #6
 800390c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	fb02 f303 	mul.w	r3, r2, r3
 8003916:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003918:	4b27      	ldr	r3, [pc, #156]	; (80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800391a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800391e:	0f1b      	lsrs	r3, r3, #28
 8003920:	f003 0307 	and.w	r3, r3, #7
 8003924:	68ba      	ldr	r2, [r7, #8]
 8003926:	fbb2 f3f3 	udiv	r3, r2, r3
 800392a:	61fb      	str	r3, [r7, #28]
          break;
 800392c:	e03a      	b.n	80039a4 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
        case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800392e:	4b22      	ldr	r3, [pc, #136]	; (80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003936:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800393a:	d108      	bne.n	800394e <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800393c:	4b1e      	ldr	r3, [pc, #120]	; (80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003944:	4a1e      	ldr	r2, [pc, #120]	; (80039c0 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8003946:	fbb2 f3f3 	udiv	r3, r2, r3
 800394a:	61bb      	str	r3, [r7, #24]
 800394c:	e007      	b.n	800395e <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800394e:	4b1a      	ldr	r3, [pc, #104]	; (80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003956:	4a19      	ldr	r2, [pc, #100]	; (80039bc <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003958:	fbb2 f3f3 	udiv	r3, r2, r3
 800395c:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 800395e:	4b16      	ldr	r3, [pc, #88]	; (80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	099b      	lsrs	r3, r3, #6
 8003964:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	fb02 f303 	mul.w	r3, r2, r3
 800396e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8003970:	4b11      	ldr	r3, [pc, #68]	; (80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	0f1b      	lsrs	r3, r3, #28
 8003976:	f003 0307 	and.w	r3, r3, #7
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003980:	61fb      	str	r3, [r7, #28]
          break;
 8003982:	e00f      	b.n	80039a4 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
        case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003984:	4b0c      	ldr	r3, [pc, #48]	; (80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800398c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003990:	d102      	bne.n	8003998 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 8003992:	4b0b      	ldr	r3, [pc, #44]	; (80039c0 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8003994:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8003996:	e005      	b.n	80039a4 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 8003998:	4b08      	ldr	r3, [pc, #32]	; (80039bc <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 800399a:	61fb      	str	r3, [r7, #28]
          break;
 800399c:	e002      	b.n	80039a4 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 800399e:	2300      	movs	r3, #0
 80039a0:	61fb      	str	r3, [r7, #28]
          break;
 80039a2:	bf00      	nop
        }
      }
      break;
 80039a4:	e000      	b.n	80039a8 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    }
    default:
    {
      break;
 80039a6:	bf00      	nop
    }
  }
  return frequency;
 80039a8:	69fb      	ldr	r3, [r7, #28]
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3724      	adds	r7, #36	; 0x24
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	40023800 	.word	0x40023800
 80039bc:	00f42400 	.word	0x00f42400
 80039c0:	007a1200 	.word	0x007a1200
 80039c4:	00bb8000 	.word	0x00bb8000

080039c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039cc:	b0ae      	sub	sp, #184	; 0xb8
 80039ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80039d0:	2300      	movs	r3, #0
 80039d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80039d6:	2300      	movs	r3, #0
 80039d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80039dc:	2300      	movs	r3, #0
 80039de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80039e2:	2300      	movs	r3, #0
 80039e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039ee:	4bcb      	ldr	r3, [pc, #812]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x354>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f003 030c 	and.w	r3, r3, #12
 80039f6:	2b0c      	cmp	r3, #12
 80039f8:	f200 8206 	bhi.w	8003e08 <HAL_RCC_GetSysClockFreq+0x440>
 80039fc:	a201      	add	r2, pc, #4	; (adr r2, 8003a04 <HAL_RCC_GetSysClockFreq+0x3c>)
 80039fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a02:	bf00      	nop
 8003a04:	08003a39 	.word	0x08003a39
 8003a08:	08003e09 	.word	0x08003e09
 8003a0c:	08003e09 	.word	0x08003e09
 8003a10:	08003e09 	.word	0x08003e09
 8003a14:	08003a41 	.word	0x08003a41
 8003a18:	08003e09 	.word	0x08003e09
 8003a1c:	08003e09 	.word	0x08003e09
 8003a20:	08003e09 	.word	0x08003e09
 8003a24:	08003a49 	.word	0x08003a49
 8003a28:	08003e09 	.word	0x08003e09
 8003a2c:	08003e09 	.word	0x08003e09
 8003a30:	08003e09 	.word	0x08003e09
 8003a34:	08003c39 	.word	0x08003c39
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a38:	4bb9      	ldr	r3, [pc, #740]	; (8003d20 <HAL_RCC_GetSysClockFreq+0x358>)
 8003a3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003a3e:	e1e7      	b.n	8003e10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a40:	4bb8      	ldr	r3, [pc, #736]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003a42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003a46:	e1e3      	b.n	8003e10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a48:	4bb4      	ldr	r3, [pc, #720]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x354>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a54:	4bb1      	ldr	r3, [pc, #708]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x354>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d071      	beq.n	8003b44 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a60:	4bae      	ldr	r3, [pc, #696]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x354>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	099b      	lsrs	r3, r3, #6
 8003a66:	2200      	movs	r2, #0
 8003a68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003a6c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003a70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a78:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003a82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003a86:	4622      	mov	r2, r4
 8003a88:	462b      	mov	r3, r5
 8003a8a:	f04f 0000 	mov.w	r0, #0
 8003a8e:	f04f 0100 	mov.w	r1, #0
 8003a92:	0159      	lsls	r1, r3, #5
 8003a94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a98:	0150      	lsls	r0, r2, #5
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	4621      	mov	r1, r4
 8003aa0:	1a51      	subs	r1, r2, r1
 8003aa2:	6439      	str	r1, [r7, #64]	; 0x40
 8003aa4:	4629      	mov	r1, r5
 8003aa6:	eb63 0301 	sbc.w	r3, r3, r1
 8003aaa:	647b      	str	r3, [r7, #68]	; 0x44
 8003aac:	f04f 0200 	mov.w	r2, #0
 8003ab0:	f04f 0300 	mov.w	r3, #0
 8003ab4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003ab8:	4649      	mov	r1, r9
 8003aba:	018b      	lsls	r3, r1, #6
 8003abc:	4641      	mov	r1, r8
 8003abe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ac2:	4641      	mov	r1, r8
 8003ac4:	018a      	lsls	r2, r1, #6
 8003ac6:	4641      	mov	r1, r8
 8003ac8:	1a51      	subs	r1, r2, r1
 8003aca:	63b9      	str	r1, [r7, #56]	; 0x38
 8003acc:	4649      	mov	r1, r9
 8003ace:	eb63 0301 	sbc.w	r3, r3, r1
 8003ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ad4:	f04f 0200 	mov.w	r2, #0
 8003ad8:	f04f 0300 	mov.w	r3, #0
 8003adc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003ae0:	4649      	mov	r1, r9
 8003ae2:	00cb      	lsls	r3, r1, #3
 8003ae4:	4641      	mov	r1, r8
 8003ae6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003aea:	4641      	mov	r1, r8
 8003aec:	00ca      	lsls	r2, r1, #3
 8003aee:	4610      	mov	r0, r2
 8003af0:	4619      	mov	r1, r3
 8003af2:	4603      	mov	r3, r0
 8003af4:	4622      	mov	r2, r4
 8003af6:	189b      	adds	r3, r3, r2
 8003af8:	633b      	str	r3, [r7, #48]	; 0x30
 8003afa:	462b      	mov	r3, r5
 8003afc:	460a      	mov	r2, r1
 8003afe:	eb42 0303 	adc.w	r3, r2, r3
 8003b02:	637b      	str	r3, [r7, #52]	; 0x34
 8003b04:	f04f 0200 	mov.w	r2, #0
 8003b08:	f04f 0300 	mov.w	r3, #0
 8003b0c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003b10:	4629      	mov	r1, r5
 8003b12:	024b      	lsls	r3, r1, #9
 8003b14:	4621      	mov	r1, r4
 8003b16:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b1a:	4621      	mov	r1, r4
 8003b1c:	024a      	lsls	r2, r1, #9
 8003b1e:	4610      	mov	r0, r2
 8003b20:	4619      	mov	r1, r3
 8003b22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b26:	2200      	movs	r2, #0
 8003b28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003b2c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003b30:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003b34:	f7fc fb66 	bl	8000204 <__aeabi_uldivmod>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b42:	e067      	b.n	8003c14 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b44:	4b75      	ldr	r3, [pc, #468]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x354>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	099b      	lsrs	r3, r3, #6
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b50:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003b54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003b58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b5c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b5e:	2300      	movs	r3, #0
 8003b60:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003b62:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003b66:	4622      	mov	r2, r4
 8003b68:	462b      	mov	r3, r5
 8003b6a:	f04f 0000 	mov.w	r0, #0
 8003b6e:	f04f 0100 	mov.w	r1, #0
 8003b72:	0159      	lsls	r1, r3, #5
 8003b74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b78:	0150      	lsls	r0, r2, #5
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	4621      	mov	r1, r4
 8003b80:	1a51      	subs	r1, r2, r1
 8003b82:	62b9      	str	r1, [r7, #40]	; 0x28
 8003b84:	4629      	mov	r1, r5
 8003b86:	eb63 0301 	sbc.w	r3, r3, r1
 8003b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b8c:	f04f 0200 	mov.w	r2, #0
 8003b90:	f04f 0300 	mov.w	r3, #0
 8003b94:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003b98:	4649      	mov	r1, r9
 8003b9a:	018b      	lsls	r3, r1, #6
 8003b9c:	4641      	mov	r1, r8
 8003b9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ba2:	4641      	mov	r1, r8
 8003ba4:	018a      	lsls	r2, r1, #6
 8003ba6:	4641      	mov	r1, r8
 8003ba8:	ebb2 0a01 	subs.w	sl, r2, r1
 8003bac:	4649      	mov	r1, r9
 8003bae:	eb63 0b01 	sbc.w	fp, r3, r1
 8003bb2:	f04f 0200 	mov.w	r2, #0
 8003bb6:	f04f 0300 	mov.w	r3, #0
 8003bba:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003bbe:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003bc2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bc6:	4692      	mov	sl, r2
 8003bc8:	469b      	mov	fp, r3
 8003bca:	4623      	mov	r3, r4
 8003bcc:	eb1a 0303 	adds.w	r3, sl, r3
 8003bd0:	623b      	str	r3, [r7, #32]
 8003bd2:	462b      	mov	r3, r5
 8003bd4:	eb4b 0303 	adc.w	r3, fp, r3
 8003bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bda:	f04f 0200 	mov.w	r2, #0
 8003bde:	f04f 0300 	mov.w	r3, #0
 8003be2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003be6:	4629      	mov	r1, r5
 8003be8:	028b      	lsls	r3, r1, #10
 8003bea:	4621      	mov	r1, r4
 8003bec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bf0:	4621      	mov	r1, r4
 8003bf2:	028a      	lsls	r2, r1, #10
 8003bf4:	4610      	mov	r0, r2
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	673b      	str	r3, [r7, #112]	; 0x70
 8003c00:	677a      	str	r2, [r7, #116]	; 0x74
 8003c02:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003c06:	f7fc fafd 	bl	8000204 <__aeabi_uldivmod>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	4613      	mov	r3, r2
 8003c10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003c14:	4b41      	ldr	r3, [pc, #260]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x354>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	0c1b      	lsrs	r3, r3, #16
 8003c1a:	f003 0303 	and.w	r3, r3, #3
 8003c1e:	3301      	adds	r3, #1
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco / pllp;
 8003c26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003c36:	e0eb      	b.n	8003e10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c38:	4b38      	ldr	r3, [pc, #224]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x354>)
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c44:	4b35      	ldr	r3, [pc, #212]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x354>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d06b      	beq.n	8003d28 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c50:	4b32      	ldr	r3, [pc, #200]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x354>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	099b      	lsrs	r3, r3, #6
 8003c56:	2200      	movs	r2, #0
 8003c58:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c5a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003c5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c62:	663b      	str	r3, [r7, #96]	; 0x60
 8003c64:	2300      	movs	r3, #0
 8003c66:	667b      	str	r3, [r7, #100]	; 0x64
 8003c68:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003c6c:	4622      	mov	r2, r4
 8003c6e:	462b      	mov	r3, r5
 8003c70:	f04f 0000 	mov.w	r0, #0
 8003c74:	f04f 0100 	mov.w	r1, #0
 8003c78:	0159      	lsls	r1, r3, #5
 8003c7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c7e:	0150      	lsls	r0, r2, #5
 8003c80:	4602      	mov	r2, r0
 8003c82:	460b      	mov	r3, r1
 8003c84:	4621      	mov	r1, r4
 8003c86:	1a51      	subs	r1, r2, r1
 8003c88:	61b9      	str	r1, [r7, #24]
 8003c8a:	4629      	mov	r1, r5
 8003c8c:	eb63 0301 	sbc.w	r3, r3, r1
 8003c90:	61fb      	str	r3, [r7, #28]
 8003c92:	f04f 0200 	mov.w	r2, #0
 8003c96:	f04f 0300 	mov.w	r3, #0
 8003c9a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003c9e:	4659      	mov	r1, fp
 8003ca0:	018b      	lsls	r3, r1, #6
 8003ca2:	4651      	mov	r1, sl
 8003ca4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ca8:	4651      	mov	r1, sl
 8003caa:	018a      	lsls	r2, r1, #6
 8003cac:	4651      	mov	r1, sl
 8003cae:	ebb2 0801 	subs.w	r8, r2, r1
 8003cb2:	4659      	mov	r1, fp
 8003cb4:	eb63 0901 	sbc.w	r9, r3, r1
 8003cb8:	f04f 0200 	mov.w	r2, #0
 8003cbc:	f04f 0300 	mov.w	r3, #0
 8003cc0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cc4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cc8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ccc:	4690      	mov	r8, r2
 8003cce:	4699      	mov	r9, r3
 8003cd0:	4623      	mov	r3, r4
 8003cd2:	eb18 0303 	adds.w	r3, r8, r3
 8003cd6:	613b      	str	r3, [r7, #16]
 8003cd8:	462b      	mov	r3, r5
 8003cda:	eb49 0303 	adc.w	r3, r9, r3
 8003cde:	617b      	str	r3, [r7, #20]
 8003ce0:	f04f 0200 	mov.w	r2, #0
 8003ce4:	f04f 0300 	mov.w	r3, #0
 8003ce8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003cec:	4629      	mov	r1, r5
 8003cee:	024b      	lsls	r3, r1, #9
 8003cf0:	4621      	mov	r1, r4
 8003cf2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003cf6:	4621      	mov	r1, r4
 8003cf8:	024a      	lsls	r2, r1, #9
 8003cfa:	4610      	mov	r0, r2
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d02:	2200      	movs	r2, #0
 8003d04:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d06:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003d08:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003d0c:	f7fc fa7a 	bl	8000204 <__aeabi_uldivmod>
 8003d10:	4602      	mov	r2, r0
 8003d12:	460b      	mov	r3, r1
 8003d14:	4613      	mov	r3, r2
 8003d16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d1a:	e065      	b.n	8003de8 <HAL_RCC_GetSysClockFreq+0x420>
 8003d1c:	40023800 	.word	0x40023800
 8003d20:	00f42400 	.word	0x00f42400
 8003d24:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d28:	4b3d      	ldr	r3, [pc, #244]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x458>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	099b      	lsrs	r3, r3, #6
 8003d2e:	2200      	movs	r2, #0
 8003d30:	4618      	mov	r0, r3
 8003d32:	4611      	mov	r1, r2
 8003d34:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d38:	653b      	str	r3, [r7, #80]	; 0x50
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	657b      	str	r3, [r7, #84]	; 0x54
 8003d3e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003d42:	4642      	mov	r2, r8
 8003d44:	464b      	mov	r3, r9
 8003d46:	f04f 0000 	mov.w	r0, #0
 8003d4a:	f04f 0100 	mov.w	r1, #0
 8003d4e:	0159      	lsls	r1, r3, #5
 8003d50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d54:	0150      	lsls	r0, r2, #5
 8003d56:	4602      	mov	r2, r0
 8003d58:	460b      	mov	r3, r1
 8003d5a:	4641      	mov	r1, r8
 8003d5c:	1a51      	subs	r1, r2, r1
 8003d5e:	60b9      	str	r1, [r7, #8]
 8003d60:	4649      	mov	r1, r9
 8003d62:	eb63 0301 	sbc.w	r3, r3, r1
 8003d66:	60fb      	str	r3, [r7, #12]
 8003d68:	f04f 0200 	mov.w	r2, #0
 8003d6c:	f04f 0300 	mov.w	r3, #0
 8003d70:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003d74:	4659      	mov	r1, fp
 8003d76:	018b      	lsls	r3, r1, #6
 8003d78:	4651      	mov	r1, sl
 8003d7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d7e:	4651      	mov	r1, sl
 8003d80:	018a      	lsls	r2, r1, #6
 8003d82:	4651      	mov	r1, sl
 8003d84:	1a54      	subs	r4, r2, r1
 8003d86:	4659      	mov	r1, fp
 8003d88:	eb63 0501 	sbc.w	r5, r3, r1
 8003d8c:	f04f 0200 	mov.w	r2, #0
 8003d90:	f04f 0300 	mov.w	r3, #0
 8003d94:	00eb      	lsls	r3, r5, #3
 8003d96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d9a:	00e2      	lsls	r2, r4, #3
 8003d9c:	4614      	mov	r4, r2
 8003d9e:	461d      	mov	r5, r3
 8003da0:	4643      	mov	r3, r8
 8003da2:	18e3      	adds	r3, r4, r3
 8003da4:	603b      	str	r3, [r7, #0]
 8003da6:	464b      	mov	r3, r9
 8003da8:	eb45 0303 	adc.w	r3, r5, r3
 8003dac:	607b      	str	r3, [r7, #4]
 8003dae:	f04f 0200 	mov.w	r2, #0
 8003db2:	f04f 0300 	mov.w	r3, #0
 8003db6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003dba:	4629      	mov	r1, r5
 8003dbc:	028b      	lsls	r3, r1, #10
 8003dbe:	4621      	mov	r1, r4
 8003dc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003dc4:	4621      	mov	r1, r4
 8003dc6:	028a      	lsls	r2, r1, #10
 8003dc8:	4610      	mov	r0, r2
 8003dca:	4619      	mov	r1, r3
 8003dcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dd4:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003dd6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003dda:	f7fc fa13 	bl	8000204 <__aeabi_uldivmod>
 8003dde:	4602      	mov	r2, r0
 8003de0:	460b      	mov	r3, r1
 8003de2:	4613      	mov	r3, r2
 8003de4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003de8:	4b0d      	ldr	r3, [pc, #52]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x458>)
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	0f1b      	lsrs	r3, r3, #28
 8003dee:	f003 0307 	and.w	r3, r3, #7
 8003df2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco / pllr;
 8003df6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003dfa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003e06:	e003      	b.n	8003e10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e08:	4b06      	ldr	r3, [pc, #24]	; (8003e24 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003e0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003e0e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e10:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	37b8      	adds	r7, #184	; 0xb8
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e1e:	bf00      	nop
 8003e20:	40023800 	.word	0x40023800
 8003e24:	00f42400 	.word	0x00f42400

08003e28 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e28d      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	f000 8083 	beq.w	8003f4e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003e48:	4b94      	ldr	r3, [pc, #592]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f003 030c 	and.w	r3, r3, #12
 8003e50:	2b04      	cmp	r3, #4
 8003e52:	d019      	beq.n	8003e88 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003e54:	4b91      	ldr	r3, [pc, #580]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f003 030c 	and.w	r3, r3, #12
        || \
 8003e5c:	2b08      	cmp	r3, #8
 8003e5e:	d106      	bne.n	8003e6e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003e60:	4b8e      	ldr	r3, [pc, #568]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e6c:	d00c      	beq.n	8003e88 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e6e:	4b8b      	ldr	r3, [pc, #556]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003e76:	2b0c      	cmp	r3, #12
 8003e78:	d112      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e7a:	4b88      	ldr	r3, [pc, #544]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e86:	d10b      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e88:	4b84      	ldr	r3, [pc, #528]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d05b      	beq.n	8003f4c <HAL_RCC_OscConfig+0x124>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d157      	bne.n	8003f4c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e25a      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ea8:	d106      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x90>
 8003eaa:	4b7c      	ldr	r3, [pc, #496]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a7b      	ldr	r2, [pc, #492]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8003eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eb4:	6013      	str	r3, [r2, #0]
 8003eb6:	e01d      	b.n	8003ef4 <HAL_RCC_OscConfig+0xcc>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ec0:	d10c      	bne.n	8003edc <HAL_RCC_OscConfig+0xb4>
 8003ec2:	4b76      	ldr	r3, [pc, #472]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a75      	ldr	r2, [pc, #468]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8003ec8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ecc:	6013      	str	r3, [r2, #0]
 8003ece:	4b73      	ldr	r3, [pc, #460]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a72      	ldr	r2, [pc, #456]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8003ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ed8:	6013      	str	r3, [r2, #0]
 8003eda:	e00b      	b.n	8003ef4 <HAL_RCC_OscConfig+0xcc>
 8003edc:	4b6f      	ldr	r3, [pc, #444]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a6e      	ldr	r2, [pc, #440]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8003ee2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ee6:	6013      	str	r3, [r2, #0]
 8003ee8:	4b6c      	ldr	r3, [pc, #432]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a6b      	ldr	r2, [pc, #428]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8003eee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ef2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d013      	beq.n	8003f24 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efc:	f7fd f94c 	bl	8001198 <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f02:	e008      	b.n	8003f16 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f04:	f7fd f948 	bl	8001198 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b64      	cmp	r3, #100	; 0x64
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e21f      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f16:	4b61      	ldr	r3, [pc, #388]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d0f0      	beq.n	8003f04 <HAL_RCC_OscConfig+0xdc>
 8003f22:	e014      	b.n	8003f4e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f24:	f7fd f938 	bl	8001198 <HAL_GetTick>
 8003f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f2a:	e008      	b.n	8003f3e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f2c:	f7fd f934 	bl	8001198 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b64      	cmp	r3, #100	; 0x64
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e20b      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f3e:	4b57      	ldr	r3, [pc, #348]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1f0      	bne.n	8003f2c <HAL_RCC_OscConfig+0x104>
 8003f4a:	e000      	b.n	8003f4e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d06f      	beq.n	800403a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003f5a:	4b50      	ldr	r3, [pc, #320]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f003 030c 	and.w	r3, r3, #12
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d017      	beq.n	8003f96 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003f66:	4b4d      	ldr	r3, [pc, #308]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f003 030c 	and.w	r3, r3, #12
        || \
 8003f6e:	2b08      	cmp	r3, #8
 8003f70:	d105      	bne.n	8003f7e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003f72:	4b4a      	ldr	r3, [pc, #296]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00b      	beq.n	8003f96 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f7e:	4b47      	ldr	r3, [pc, #284]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003f86:	2b0c      	cmp	r3, #12
 8003f88:	d11c      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f8a:	4b44      	ldr	r3, [pc, #272]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d116      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f96:	4b41      	ldr	r3, [pc, #260]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d005      	beq.n	8003fae <HAL_RCC_OscConfig+0x186>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d001      	beq.n	8003fae <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e1d3      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fae:	4b3b      	ldr	r3, [pc, #236]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	4937      	ldr	r1, [pc, #220]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fc2:	e03a      	b.n	800403a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d020      	beq.n	800400e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fcc:	4b34      	ldr	r3, [pc, #208]	; (80040a0 <HAL_RCC_OscConfig+0x278>)
 8003fce:	2201      	movs	r2, #1
 8003fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd2:	f7fd f8e1 	bl	8001198 <HAL_GetTick>
 8003fd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fd8:	e008      	b.n	8003fec <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fda:	f7fd f8dd 	bl	8001198 <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d901      	bls.n	8003fec <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e1b4      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fec:	4b2b      	ldr	r3, [pc, #172]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d0f0      	beq.n	8003fda <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ff8:	4b28      	ldr	r3, [pc, #160]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	00db      	lsls	r3, r3, #3
 8004006:	4925      	ldr	r1, [pc, #148]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8004008:	4313      	orrs	r3, r2
 800400a:	600b      	str	r3, [r1, #0]
 800400c:	e015      	b.n	800403a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800400e:	4b24      	ldr	r3, [pc, #144]	; (80040a0 <HAL_RCC_OscConfig+0x278>)
 8004010:	2200      	movs	r2, #0
 8004012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004014:	f7fd f8c0 	bl	8001198 <HAL_GetTick>
 8004018:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800401a:	e008      	b.n	800402e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800401c:	f7fd f8bc 	bl	8001198 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	2b02      	cmp	r3, #2
 8004028:	d901      	bls.n	800402e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e193      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800402e:	4b1b      	ldr	r3, [pc, #108]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1f0      	bne.n	800401c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0308 	and.w	r3, r3, #8
 8004042:	2b00      	cmp	r3, #0
 8004044:	d036      	beq.n	80040b4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d016      	beq.n	800407c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800404e:	4b15      	ldr	r3, [pc, #84]	; (80040a4 <HAL_RCC_OscConfig+0x27c>)
 8004050:	2201      	movs	r2, #1
 8004052:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004054:	f7fd f8a0 	bl	8001198 <HAL_GetTick>
 8004058:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800405a:	e008      	b.n	800406e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800405c:	f7fd f89c 	bl	8001198 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	2b02      	cmp	r3, #2
 8004068:	d901      	bls.n	800406e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e173      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800406e:	4b0b      	ldr	r3, [pc, #44]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8004070:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004072:	f003 0302 	and.w	r3, r3, #2
 8004076:	2b00      	cmp	r3, #0
 8004078:	d0f0      	beq.n	800405c <HAL_RCC_OscConfig+0x234>
 800407a:	e01b      	b.n	80040b4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800407c:	4b09      	ldr	r3, [pc, #36]	; (80040a4 <HAL_RCC_OscConfig+0x27c>)
 800407e:	2200      	movs	r2, #0
 8004080:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004082:	f7fd f889 	bl	8001198 <HAL_GetTick>
 8004086:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004088:	e00e      	b.n	80040a8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800408a:	f7fd f885 	bl	8001198 <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	2b02      	cmp	r3, #2
 8004096:	d907      	bls.n	80040a8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e15c      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
 800409c:	40023800 	.word	0x40023800
 80040a0:	42470000 	.word	0x42470000
 80040a4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040a8:	4b8a      	ldr	r3, [pc, #552]	; (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 80040aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1ea      	bne.n	800408a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0304 	and.w	r3, r3, #4
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f000 8097 	beq.w	80041f0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040c2:	2300      	movs	r3, #0
 80040c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040c6:	4b83      	ldr	r3, [pc, #524]	; (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10f      	bne.n	80040f2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040d2:	2300      	movs	r3, #0
 80040d4:	60bb      	str	r3, [r7, #8]
 80040d6:	4b7f      	ldr	r3, [pc, #508]	; (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 80040d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040da:	4a7e      	ldr	r2, [pc, #504]	; (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 80040dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040e0:	6413      	str	r3, [r2, #64]	; 0x40
 80040e2:	4b7c      	ldr	r3, [pc, #496]	; (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 80040e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ea:	60bb      	str	r3, [r7, #8]
 80040ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040ee:	2301      	movs	r3, #1
 80040f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040f2:	4b79      	ldr	r3, [pc, #484]	; (80042d8 <HAL_RCC_OscConfig+0x4b0>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d118      	bne.n	8004130 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040fe:	4b76      	ldr	r3, [pc, #472]	; (80042d8 <HAL_RCC_OscConfig+0x4b0>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a75      	ldr	r2, [pc, #468]	; (80042d8 <HAL_RCC_OscConfig+0x4b0>)
 8004104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004108:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800410a:	f7fd f845 	bl	8001198 <HAL_GetTick>
 800410e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004110:	e008      	b.n	8004124 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004112:	f7fd f841 	bl	8001198 <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	2b02      	cmp	r3, #2
 800411e:	d901      	bls.n	8004124 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e118      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004124:	4b6c      	ldr	r3, [pc, #432]	; (80042d8 <HAL_RCC_OscConfig+0x4b0>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800412c:	2b00      	cmp	r3, #0
 800412e:	d0f0      	beq.n	8004112 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d106      	bne.n	8004146 <HAL_RCC_OscConfig+0x31e>
 8004138:	4b66      	ldr	r3, [pc, #408]	; (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 800413a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800413c:	4a65      	ldr	r2, [pc, #404]	; (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 800413e:	f043 0301 	orr.w	r3, r3, #1
 8004142:	6713      	str	r3, [r2, #112]	; 0x70
 8004144:	e01c      	b.n	8004180 <HAL_RCC_OscConfig+0x358>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	2b05      	cmp	r3, #5
 800414c:	d10c      	bne.n	8004168 <HAL_RCC_OscConfig+0x340>
 800414e:	4b61      	ldr	r3, [pc, #388]	; (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 8004150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004152:	4a60      	ldr	r2, [pc, #384]	; (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 8004154:	f043 0304 	orr.w	r3, r3, #4
 8004158:	6713      	str	r3, [r2, #112]	; 0x70
 800415a:	4b5e      	ldr	r3, [pc, #376]	; (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 800415c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800415e:	4a5d      	ldr	r2, [pc, #372]	; (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 8004160:	f043 0301 	orr.w	r3, r3, #1
 8004164:	6713      	str	r3, [r2, #112]	; 0x70
 8004166:	e00b      	b.n	8004180 <HAL_RCC_OscConfig+0x358>
 8004168:	4b5a      	ldr	r3, [pc, #360]	; (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 800416a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800416c:	4a59      	ldr	r2, [pc, #356]	; (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 800416e:	f023 0301 	bic.w	r3, r3, #1
 8004172:	6713      	str	r3, [r2, #112]	; 0x70
 8004174:	4b57      	ldr	r3, [pc, #348]	; (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 8004176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004178:	4a56      	ldr	r2, [pc, #344]	; (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 800417a:	f023 0304 	bic.w	r3, r3, #4
 800417e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d015      	beq.n	80041b4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004188:	f7fd f806 	bl	8001198 <HAL_GetTick>
 800418c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800418e:	e00a      	b.n	80041a6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004190:	f7fd f802 	bl	8001198 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	f241 3288 	movw	r2, #5000	; 0x1388
 800419e:	4293      	cmp	r3, r2
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e0d7      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041a6:	4b4b      	ldr	r3, [pc, #300]	; (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 80041a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d0ee      	beq.n	8004190 <HAL_RCC_OscConfig+0x368>
 80041b2:	e014      	b.n	80041de <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b4:	f7fc fff0 	bl	8001198 <HAL_GetTick>
 80041b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041ba:	e00a      	b.n	80041d2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041bc:	f7fc ffec 	bl	8001198 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e0c1      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041d2:	4b40      	ldr	r3, [pc, #256]	; (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 80041d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1ee      	bne.n	80041bc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041de:	7dfb      	ldrb	r3, [r7, #23]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d105      	bne.n	80041f0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041e4:	4b3b      	ldr	r3, [pc, #236]	; (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 80041e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e8:	4a3a      	ldr	r2, [pc, #232]	; (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 80041ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f000 80ad 	beq.w	8004354 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041fa:	4b36      	ldr	r3, [pc, #216]	; (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f003 030c 	and.w	r3, r3, #12
 8004202:	2b08      	cmp	r3, #8
 8004204:	d060      	beq.n	80042c8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	2b02      	cmp	r3, #2
 800420c:	d145      	bne.n	800429a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800420e:	4b33      	ldr	r3, [pc, #204]	; (80042dc <HAL_RCC_OscConfig+0x4b4>)
 8004210:	2200      	movs	r2, #0
 8004212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004214:	f7fc ffc0 	bl	8001198 <HAL_GetTick>
 8004218:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800421a:	e008      	b.n	800422e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800421c:	f7fc ffbc 	bl	8001198 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b02      	cmp	r3, #2
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e093      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800422e:	4b29      	ldr	r3, [pc, #164]	; (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1f0      	bne.n	800421c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	69da      	ldr	r2, [r3, #28]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	431a      	orrs	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004248:	019b      	lsls	r3, r3, #6
 800424a:	431a      	orrs	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004250:	085b      	lsrs	r3, r3, #1
 8004252:	3b01      	subs	r3, #1
 8004254:	041b      	lsls	r3, r3, #16
 8004256:	431a      	orrs	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425c:	061b      	lsls	r3, r3, #24
 800425e:	431a      	orrs	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004264:	071b      	lsls	r3, r3, #28
 8004266:	491b      	ldr	r1, [pc, #108]	; (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 8004268:	4313      	orrs	r3, r2
 800426a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800426c:	4b1b      	ldr	r3, [pc, #108]	; (80042dc <HAL_RCC_OscConfig+0x4b4>)
 800426e:	2201      	movs	r2, #1
 8004270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004272:	f7fc ff91 	bl	8001198 <HAL_GetTick>
 8004276:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004278:	e008      	b.n	800428c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800427a:	f7fc ff8d 	bl	8001198 <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	2b02      	cmp	r3, #2
 8004286:	d901      	bls.n	800428c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e064      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800428c:	4b11      	ldr	r3, [pc, #68]	; (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d0f0      	beq.n	800427a <HAL_RCC_OscConfig+0x452>
 8004298:	e05c      	b.n	8004354 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800429a:	4b10      	ldr	r3, [pc, #64]	; (80042dc <HAL_RCC_OscConfig+0x4b4>)
 800429c:	2200      	movs	r2, #0
 800429e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a0:	f7fc ff7a 	bl	8001198 <HAL_GetTick>
 80042a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042a6:	e008      	b.n	80042ba <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042a8:	f7fc ff76 	bl	8001198 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e04d      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ba:	4b06      	ldr	r3, [pc, #24]	; (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1f0      	bne.n	80042a8 <HAL_RCC_OscConfig+0x480>
 80042c6:	e045      	b.n	8004354 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d107      	bne.n	80042e0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e040      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
 80042d4:	40023800 	.word	0x40023800
 80042d8:	40007000 	.word	0x40007000
 80042dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042e0:	4b1f      	ldr	r3, [pc, #124]	; (8004360 <HAL_RCC_OscConfig+0x538>)
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d030      	beq.n	8004350 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d129      	bne.n	8004350 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004306:	429a      	cmp	r2, r3
 8004308:	d122      	bne.n	8004350 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004310:	4013      	ands	r3, r2
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004316:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004318:	4293      	cmp	r3, r2
 800431a:	d119      	bne.n	8004350 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004326:	085b      	lsrs	r3, r3, #1
 8004328:	3b01      	subs	r3, #1
 800432a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800432c:	429a      	cmp	r2, r3
 800432e:	d10f      	bne.n	8004350 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800433c:	429a      	cmp	r2, r3
 800433e:	d107      	bne.n	8004350 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800434c:	429a      	cmp	r2, r3
 800434e:	d001      	beq.n	8004354 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e000      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3718      	adds	r7, #24
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	40023800 	.word	0x40023800

08004364 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d101      	bne.n	800437a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e073      	b.n	8004462 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	7f5b      	ldrb	r3, [r3, #29]
 800437e:	b2db      	uxtb	r3, r3
 8004380:	2b00      	cmp	r3, #0
 8004382:	d105      	bne.n	8004390 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f7fc fcf8 	bl	8000d80 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2202      	movs	r2, #2
 8004394:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	f003 0310 	and.w	r3, r3, #16
 80043a0:	2b10      	cmp	r3, #16
 80043a2:	d055      	beq.n	8004450 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	22ca      	movs	r2, #202	; 0xca
 80043aa:	625a      	str	r2, [r3, #36]	; 0x24
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2253      	movs	r2, #83	; 0x53
 80043b2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 f87f 	bl	80044b8 <RTC_EnterInitMode>
 80043ba:	4603      	mov	r3, r0
 80043bc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80043be:	7bfb      	ldrb	r3, [r7, #15]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d12c      	bne.n	800441e <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	6812      	ldr	r2, [r2, #0]
 80043ce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80043d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043d6:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	6899      	ldr	r1, [r3, #8]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685a      	ldr	r2, [r3, #4]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	431a      	orrs	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	695b      	ldr	r3, [r3, #20]
 80043ec:	431a      	orrs	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	430a      	orrs	r2, r1
 80043f4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	68d2      	ldr	r2, [r2, #12]
 80043fe:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	6919      	ldr	r1, [r3, #16]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	041a      	lsls	r2, r3, #16
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	430a      	orrs	r2, r1
 8004412:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 f886 	bl	8004526 <RTC_ExitInitMode>
 800441a:	4603      	mov	r3, r0
 800441c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800441e:	7bfb      	ldrb	r3, [r7, #15]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d110      	bne.n	8004446 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004432:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	699a      	ldr	r2, [r3, #24]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	430a      	orrs	r2, r1
 8004444:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	22ff      	movs	r2, #255	; 0xff
 800444c:	625a      	str	r2, [r3, #36]	; 0x24
 800444e:	e001      	b.n	8004454 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004450:	2300      	movs	r3, #0
 8004452:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004454:	7bfb      	ldrb	r3, [r7, #15]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d102      	bne.n	8004460 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2201      	movs	r2, #1
 800445e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8004460:	7bfb      	ldrb	r3, [r7, #15]
}
 8004462:	4618      	mov	r0, r3
 8004464:	3710      	adds	r7, #16
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
	...

0800446c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004474:	2300      	movs	r3, #0
 8004476:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a0d      	ldr	r2, [pc, #52]	; (80044b4 <HAL_RTC_WaitForSynchro+0x48>)
 800447e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004480:	f7fc fe8a 	bl	8001198 <HAL_GetTick>
 8004484:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004486:	e009      	b.n	800449c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004488:	f7fc fe86 	bl	8001198 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004496:	d901      	bls.n	800449c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e007      	b.n	80044ac <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	f003 0320 	and.w	r3, r3, #32
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d0ee      	beq.n	8004488 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3710      	adds	r7, #16
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	00017f5f 	.word	0x00017f5f

080044b8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044c0:	2300      	movs	r3, #0
 80044c2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80044c4:	2300      	movs	r3, #0
 80044c6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d122      	bne.n	800451c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68da      	ldr	r2, [r3, #12]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80044e4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80044e6:	f7fc fe57 	bl	8001198 <HAL_GetTick>
 80044ea:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80044ec:	e00c      	b.n	8004508 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80044ee:	f7fc fe53 	bl	8001198 <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044fc:	d904      	bls.n	8004508 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2204      	movs	r2, #4
 8004502:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004512:	2b00      	cmp	r3, #0
 8004514:	d102      	bne.n	800451c <RTC_EnterInitMode+0x64>
 8004516:	7bfb      	ldrb	r3, [r7, #15]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d1e8      	bne.n	80044ee <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800451c:	7bfb      	ldrb	r3, [r7, #15]
}
 800451e:	4618      	mov	r0, r3
 8004520:	3710      	adds	r7, #16
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004526:	b580      	push	{r7, lr}
 8004528:	b084      	sub	sp, #16
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800452e:	2300      	movs	r3, #0
 8004530:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68da      	ldr	r2, [r3, #12]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004540:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f003 0320 	and.w	r3, r3, #32
 800454c:	2b00      	cmp	r3, #0
 800454e:	d10a      	bne.n	8004566 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f7ff ff8b 	bl	800446c <HAL_RTC_WaitForSynchro>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d004      	beq.n	8004566 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2204      	movs	r2, #4
 8004560:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004566:	7bfb      	ldrb	r3, [r7, #15]
}
 8004568:	4618      	mov	r0, r3
 800456a:	3710      	adds	r7, #16
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d101      	bne.n	8004582 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e07b      	b.n	800467a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004586:	2b00      	cmp	r3, #0
 8004588:	d108      	bne.n	800459c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004592:	d009      	beq.n	80045a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	61da      	str	r2, [r3, #28]
 800459a:	e005      	b.n	80045a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d106      	bne.n	80045c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f7fc fc06 	bl	8000dd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2202      	movs	r2, #2
 80045cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80045f0:	431a      	orrs	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045fa:	431a      	orrs	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	431a      	orrs	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	431a      	orrs	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	699b      	ldr	r3, [r3, #24]
 8004614:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004618:	431a      	orrs	r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	69db      	ldr	r3, [r3, #28]
 800461e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004622:	431a      	orrs	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800462c:	ea42 0103 	orr.w	r1, r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004634:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	430a      	orrs	r2, r1
 800463e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	0c1b      	lsrs	r3, r3, #16
 8004646:	f003 0104 	and.w	r1, r3, #4
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464e:	f003 0210 	and.w	r2, r3, #16
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	430a      	orrs	r2, r1
 8004658:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	69da      	ldr	r2, [r3, #28]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004668:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b088      	sub	sp, #32
 8004686:	af00      	add	r7, sp, #0
 8004688:	60f8      	str	r0, [r7, #12]
 800468a:	60b9      	str	r1, [r7, #8]
 800468c:	603b      	str	r3, [r7, #0]
 800468e:	4613      	mov	r3, r2
 8004690:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004692:	f7fc fd81 	bl	8001198 <HAL_GetTick>
 8004696:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004698:	88fb      	ldrh	r3, [r7, #6]
 800469a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d001      	beq.n	80046ac <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80046a8:	2302      	movs	r3, #2
 80046aa:	e12a      	b.n	8004902 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d002      	beq.n	80046b8 <HAL_SPI_Transmit+0x36>
 80046b2:	88fb      	ldrh	r3, [r7, #6]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d101      	bne.n	80046bc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e122      	b.n	8004902 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d101      	bne.n	80046ca <HAL_SPI_Transmit+0x48>
 80046c6:	2302      	movs	r3, #2
 80046c8:	e11b      	b.n	8004902 <HAL_SPI_Transmit+0x280>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2203      	movs	r2, #3
 80046d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	68ba      	ldr	r2, [r7, #8]
 80046e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	88fa      	ldrh	r2, [r7, #6]
 80046ea:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	88fa      	ldrh	r2, [r7, #6]
 80046f0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004718:	d10f      	bne.n	800473a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004728:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004738:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004744:	2b40      	cmp	r3, #64	; 0x40
 8004746:	d007      	beq.n	8004758 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004756:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004760:	d152      	bne.n	8004808 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d002      	beq.n	8004770 <HAL_SPI_Transmit+0xee>
 800476a:	8b7b      	ldrh	r3, [r7, #26]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d145      	bne.n	80047fc <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004774:	881a      	ldrh	r2, [r3, #0]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004780:	1c9a      	adds	r2, r3, #2
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800478a:	b29b      	uxth	r3, r3
 800478c:	3b01      	subs	r3, #1
 800478e:	b29a      	uxth	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004794:	e032      	b.n	80047fc <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f003 0302 	and.w	r3, r3, #2
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d112      	bne.n	80047ca <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a8:	881a      	ldrh	r2, [r3, #0]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b4:	1c9a      	adds	r2, r3, #2
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047be:	b29b      	uxth	r3, r3
 80047c0:	3b01      	subs	r3, #1
 80047c2:	b29a      	uxth	r2, r3
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	86da      	strh	r2, [r3, #54]	; 0x36
 80047c8:	e018      	b.n	80047fc <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047ca:	f7fc fce5 	bl	8001198 <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	683a      	ldr	r2, [r7, #0]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d803      	bhi.n	80047e2 <HAL_SPI_Transmit+0x160>
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e0:	d102      	bne.n	80047e8 <HAL_SPI_Transmit+0x166>
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d109      	bne.n	80047fc <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e082      	b.n	8004902 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004800:	b29b      	uxth	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1c7      	bne.n	8004796 <HAL_SPI_Transmit+0x114>
 8004806:	e053      	b.n	80048b0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d002      	beq.n	8004816 <HAL_SPI_Transmit+0x194>
 8004810:	8b7b      	ldrh	r3, [r7, #26]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d147      	bne.n	80048a6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	330c      	adds	r3, #12
 8004820:	7812      	ldrb	r2, [r2, #0]
 8004822:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004828:	1c5a      	adds	r2, r3, #1
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004832:	b29b      	uxth	r3, r3
 8004834:	3b01      	subs	r3, #1
 8004836:	b29a      	uxth	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800483c:	e033      	b.n	80048a6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f003 0302 	and.w	r3, r3, #2
 8004848:	2b02      	cmp	r3, #2
 800484a:	d113      	bne.n	8004874 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	330c      	adds	r3, #12
 8004856:	7812      	ldrb	r2, [r2, #0]
 8004858:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485e:	1c5a      	adds	r2, r3, #1
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004868:	b29b      	uxth	r3, r3
 800486a:	3b01      	subs	r3, #1
 800486c:	b29a      	uxth	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	86da      	strh	r2, [r3, #54]	; 0x36
 8004872:	e018      	b.n	80048a6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004874:	f7fc fc90 	bl	8001198 <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	683a      	ldr	r2, [r7, #0]
 8004880:	429a      	cmp	r2, r3
 8004882:	d803      	bhi.n	800488c <HAL_SPI_Transmit+0x20a>
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800488a:	d102      	bne.n	8004892 <HAL_SPI_Transmit+0x210>
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d109      	bne.n	80048a6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e02d      	b.n	8004902 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1c6      	bne.n	800483e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048b0:	69fa      	ldr	r2, [r7, #28]
 80048b2:	6839      	ldr	r1, [r7, #0]
 80048b4:	68f8      	ldr	r0, [r7, #12]
 80048b6:	f000 f8b1 	bl	8004a1c <SPI_EndRxTxTransaction>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d002      	beq.n	80048c6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2220      	movs	r2, #32
 80048c4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d10a      	bne.n	80048e4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048ce:	2300      	movs	r3, #0
 80048d0:	617b      	str	r3, [r7, #20]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	617b      	str	r3, [r7, #20]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	617b      	str	r3, [r7, #20]
 80048e2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d001      	beq.n	8004900 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e000      	b.n	8004902 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004900:	2300      	movs	r3, #0
  }
}
 8004902:	4618      	mov	r0, r3
 8004904:	3720      	adds	r7, #32
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
	...

0800490c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b088      	sub	sp, #32
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	603b      	str	r3, [r7, #0]
 8004918:	4613      	mov	r3, r2
 800491a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800491c:	f7fc fc3c 	bl	8001198 <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004924:	1a9b      	subs	r3, r3, r2
 8004926:	683a      	ldr	r2, [r7, #0]
 8004928:	4413      	add	r3, r2
 800492a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800492c:	f7fc fc34 	bl	8001198 <HAL_GetTick>
 8004930:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004932:	4b39      	ldr	r3, [pc, #228]	; (8004a18 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	015b      	lsls	r3, r3, #5
 8004938:	0d1b      	lsrs	r3, r3, #20
 800493a:	69fa      	ldr	r2, [r7, #28]
 800493c:	fb02 f303 	mul.w	r3, r2, r3
 8004940:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004942:	e054      	b.n	80049ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800494a:	d050      	beq.n	80049ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800494c:	f7fc fc24 	bl	8001198 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	69fa      	ldr	r2, [r7, #28]
 8004958:	429a      	cmp	r2, r3
 800495a:	d902      	bls.n	8004962 <SPI_WaitFlagStateUntilTimeout+0x56>
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d13d      	bne.n	80049de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	685a      	ldr	r2, [r3, #4]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004970:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800497a:	d111      	bne.n	80049a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004984:	d004      	beq.n	8004990 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800498e:	d107      	bne.n	80049a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800499e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049a8:	d10f      	bne.n	80049ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049b8:	601a      	str	r2, [r3, #0]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e017      	b.n	8004a0e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d101      	bne.n	80049e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80049e4:	2300      	movs	r3, #0
 80049e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	3b01      	subs	r3, #1
 80049ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	689a      	ldr	r2, [r3, #8]
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	4013      	ands	r3, r2
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	bf0c      	ite	eq
 80049fe:	2301      	moveq	r3, #1
 8004a00:	2300      	movne	r3, #0
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	461a      	mov	r2, r3
 8004a06:	79fb      	ldrb	r3, [r7, #7]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d19b      	bne.n	8004944 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3720      	adds	r7, #32
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	20000000 	.word	0x20000000

08004a1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b088      	sub	sp, #32
 8004a20:	af02      	add	r7, sp, #8
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	9300      	str	r3, [sp, #0]
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	2102      	movs	r1, #2
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f7ff ff6a 	bl	800490c <SPI_WaitFlagStateUntilTimeout>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d007      	beq.n	8004a4e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a42:	f043 0220 	orr.w	r2, r3, #32
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e032      	b.n	8004ab4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004a4e:	4b1b      	ldr	r3, [pc, #108]	; (8004abc <SPI_EndRxTxTransaction+0xa0>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a1b      	ldr	r2, [pc, #108]	; (8004ac0 <SPI_EndRxTxTransaction+0xa4>)
 8004a54:	fba2 2303 	umull	r2, r3, r2, r3
 8004a58:	0d5b      	lsrs	r3, r3, #21
 8004a5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a5e:	fb02 f303 	mul.w	r3, r2, r3
 8004a62:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a6c:	d112      	bne.n	8004a94 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	2200      	movs	r2, #0
 8004a76:	2180      	movs	r1, #128	; 0x80
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f7ff ff47 	bl	800490c <SPI_WaitFlagStateUntilTimeout>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d016      	beq.n	8004ab2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a88:	f043 0220 	orr.w	r2, r3, #32
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	e00f      	b.n	8004ab4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00a      	beq.n	8004ab0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aaa:	2b80      	cmp	r3, #128	; 0x80
 8004aac:	d0f2      	beq.n	8004a94 <SPI_EndRxTxTransaction+0x78>
 8004aae:	e000      	b.n	8004ab2 <SPI_EndRxTxTransaction+0x96>
        break;
 8004ab0:	bf00      	nop
  }

  return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3718      	adds	r7, #24
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	20000000 	.word	0x20000000
 8004ac0:	165e9f81 	.word	0x165e9f81

08004ac4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d101      	bne.n	8004ad6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e042      	b.n	8004b5c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d106      	bne.n	8004af0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f7fc f9ea 	bl	8000ec4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2224      	movs	r2, #36	; 0x24
 8004af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68da      	ldr	r2, [r3, #12]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 f973 	bl	8004df4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	691a      	ldr	r2, [r3, #16]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	695a      	ldr	r2, [r3, #20]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68da      	ldr	r2, [r3, #12]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2220      	movs	r2, #32
 8004b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2220      	movs	r2, #32
 8004b50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3708      	adds	r7, #8
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b08a      	sub	sp, #40	; 0x28
 8004b68:	af02      	add	r7, sp, #8
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	603b      	str	r3, [r7, #0]
 8004b70:	4613      	mov	r3, r2
 8004b72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b74:	2300      	movs	r3, #0
 8004b76:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b20      	cmp	r3, #32
 8004b82:	d175      	bne.n	8004c70 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d002      	beq.n	8004b90 <HAL_UART_Transmit+0x2c>
 8004b8a:	88fb      	ldrh	r3, [r7, #6]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d101      	bne.n	8004b94 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e06e      	b.n	8004c72 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2221      	movs	r2, #33	; 0x21
 8004b9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ba2:	f7fc faf9 	bl	8001198 <HAL_GetTick>
 8004ba6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	88fa      	ldrh	r2, [r7, #6]
 8004bac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	88fa      	ldrh	r2, [r7, #6]
 8004bb2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bbc:	d108      	bne.n	8004bd0 <HAL_UART_Transmit+0x6c>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d104      	bne.n	8004bd0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	61bb      	str	r3, [r7, #24]
 8004bce:	e003      	b.n	8004bd8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004bd8:	e02e      	b.n	8004c38 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	9300      	str	r3, [sp, #0]
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	2200      	movs	r2, #0
 8004be2:	2180      	movs	r1, #128	; 0x80
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f000 f848 	bl	8004c7a <UART_WaitOnFlagUntilTimeout>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d005      	beq.n	8004bfc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e03a      	b.n	8004c72 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d10b      	bne.n	8004c1a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	881b      	ldrh	r3, [r3, #0]
 8004c06:	461a      	mov	r2, r3
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	3302      	adds	r3, #2
 8004c16:	61bb      	str	r3, [r7, #24]
 8004c18:	e007      	b.n	8004c2a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	781a      	ldrb	r2, [r3, #0]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	3301      	adds	r3, #1
 8004c28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	3b01      	subs	r3, #1
 8004c32:	b29a      	uxth	r2, r3
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1cb      	bne.n	8004bda <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	2140      	movs	r1, #64	; 0x40
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f000 f814 	bl	8004c7a <UART_WaitOnFlagUntilTimeout>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d005      	beq.n	8004c64 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2220      	movs	r2, #32
 8004c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e006      	b.n	8004c72 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2220      	movs	r2, #32
 8004c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	e000      	b.n	8004c72 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004c70:	2302      	movs	r3, #2
  }
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3720      	adds	r7, #32
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c7a:	b580      	push	{r7, lr}
 8004c7c:	b086      	sub	sp, #24
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	60f8      	str	r0, [r7, #12]
 8004c82:	60b9      	str	r1, [r7, #8]
 8004c84:	603b      	str	r3, [r7, #0]
 8004c86:	4613      	mov	r3, r2
 8004c88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c8a:	e03b      	b.n	8004d04 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c8c:	6a3b      	ldr	r3, [r7, #32]
 8004c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c92:	d037      	beq.n	8004d04 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c94:	f7fc fa80 	bl	8001198 <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	6a3a      	ldr	r2, [r7, #32]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d302      	bcc.n	8004caa <UART_WaitOnFlagUntilTimeout+0x30>
 8004ca4:	6a3b      	ldr	r3, [r7, #32]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d101      	bne.n	8004cae <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e03a      	b.n	8004d24 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	f003 0304 	and.w	r3, r3, #4
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d023      	beq.n	8004d04 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	2b80      	cmp	r3, #128	; 0x80
 8004cc0:	d020      	beq.n	8004d04 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	2b40      	cmp	r3, #64	; 0x40
 8004cc6:	d01d      	beq.n	8004d04 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0308 	and.w	r3, r3, #8
 8004cd2:	2b08      	cmp	r3, #8
 8004cd4:	d116      	bne.n	8004d04 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	617b      	str	r3, [r7, #20]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	617b      	str	r3, [r7, #20]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	617b      	str	r3, [r7, #20]
 8004cea:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f000 f81d 	bl	8004d2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2208      	movs	r2, #8
 8004cf6:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e00f      	b.n	8004d24 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	68ba      	ldr	r2, [r7, #8]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	bf0c      	ite	eq
 8004d14:	2301      	moveq	r3, #1
 8004d16:	2300      	movne	r3, #0
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	79fb      	ldrb	r3, [r7, #7]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d0b4      	beq.n	8004c8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3718      	adds	r7, #24
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b095      	sub	sp, #84	; 0x54
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	330c      	adds	r3, #12
 8004d3a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d3e:	e853 3f00 	ldrex	r3, [r3]
 8004d42:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	330c      	adds	r3, #12
 8004d52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d54:	643a      	str	r2, [r7, #64]	; 0x40
 8004d56:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d5c:	e841 2300 	strex	r3, r2, [r1]
 8004d60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d1e5      	bne.n	8004d34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	3314      	adds	r3, #20
 8004d6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d70:	6a3b      	ldr	r3, [r7, #32]
 8004d72:	e853 3f00 	ldrex	r3, [r3]
 8004d76:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	f023 0301 	bic.w	r3, r3, #1
 8004d7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	3314      	adds	r3, #20
 8004d86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d88:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d90:	e841 2300 	strex	r3, r2, [r1]
 8004d94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1e5      	bne.n	8004d68 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d119      	bne.n	8004dd8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	330c      	adds	r3, #12
 8004daa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	e853 3f00 	ldrex	r3, [r3]
 8004db2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	f023 0310 	bic.w	r3, r3, #16
 8004dba:	647b      	str	r3, [r7, #68]	; 0x44
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	330c      	adds	r3, #12
 8004dc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004dc4:	61ba      	str	r2, [r7, #24]
 8004dc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc8:	6979      	ldr	r1, [r7, #20]
 8004dca:	69ba      	ldr	r2, [r7, #24]
 8004dcc:	e841 2300 	strex	r3, r2, [r1]
 8004dd0:	613b      	str	r3, [r7, #16]
   return(result);
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1e5      	bne.n	8004da4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2220      	movs	r2, #32
 8004ddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004de6:	bf00      	nop
 8004de8:	3754      	adds	r7, #84	; 0x54
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
	...

08004df4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004df4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004df8:	b0c0      	sub	sp, #256	; 0x100
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e10:	68d9      	ldr	r1, [r3, #12]
 8004e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	ea40 0301 	orr.w	r3, r0, r1
 8004e1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e22:	689a      	ldr	r2, [r3, #8]
 8004e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	431a      	orrs	r2, r3
 8004e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	431a      	orrs	r2, r3
 8004e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e38:	69db      	ldr	r3, [r3, #28]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004e4c:	f021 010c 	bic.w	r1, r1, #12
 8004e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e5a:	430b      	orrs	r3, r1
 8004e5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e6e:	6999      	ldr	r1, [r3, #24]
 8004e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	ea40 0301 	orr.w	r3, r0, r1
 8004e7a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	4b8f      	ldr	r3, [pc, #572]	; (80050c0 <UART_SetConfig+0x2cc>)
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d005      	beq.n	8004e94 <UART_SetConfig+0xa0>
 8004e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	4b8d      	ldr	r3, [pc, #564]	; (80050c4 <UART_SetConfig+0x2d0>)
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d104      	bne.n	8004e9e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e94:	f7fe f810 	bl	8002eb8 <HAL_RCC_GetPCLK2Freq>
 8004e98:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004e9c:	e003      	b.n	8004ea6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e9e:	f7fd fff7 	bl	8002e90 <HAL_RCC_GetPCLK1Freq>
 8004ea2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eaa:	69db      	ldr	r3, [r3, #28]
 8004eac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eb0:	f040 810c 	bne.w	80050cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004eb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004ebe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004ec2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004ec6:	4622      	mov	r2, r4
 8004ec8:	462b      	mov	r3, r5
 8004eca:	1891      	adds	r1, r2, r2
 8004ecc:	65b9      	str	r1, [r7, #88]	; 0x58
 8004ece:	415b      	adcs	r3, r3
 8004ed0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ed2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004ed6:	4621      	mov	r1, r4
 8004ed8:	eb12 0801 	adds.w	r8, r2, r1
 8004edc:	4629      	mov	r1, r5
 8004ede:	eb43 0901 	adc.w	r9, r3, r1
 8004ee2:	f04f 0200 	mov.w	r2, #0
 8004ee6:	f04f 0300 	mov.w	r3, #0
 8004eea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004eee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ef2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ef6:	4690      	mov	r8, r2
 8004ef8:	4699      	mov	r9, r3
 8004efa:	4623      	mov	r3, r4
 8004efc:	eb18 0303 	adds.w	r3, r8, r3
 8004f00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004f04:	462b      	mov	r3, r5
 8004f06:	eb49 0303 	adc.w	r3, r9, r3
 8004f0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004f1a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004f1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004f22:	460b      	mov	r3, r1
 8004f24:	18db      	adds	r3, r3, r3
 8004f26:	653b      	str	r3, [r7, #80]	; 0x50
 8004f28:	4613      	mov	r3, r2
 8004f2a:	eb42 0303 	adc.w	r3, r2, r3
 8004f2e:	657b      	str	r3, [r7, #84]	; 0x54
 8004f30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004f34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004f38:	f7fb f964 	bl	8000204 <__aeabi_uldivmod>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	460b      	mov	r3, r1
 8004f40:	4b61      	ldr	r3, [pc, #388]	; (80050c8 <UART_SetConfig+0x2d4>)
 8004f42:	fba3 2302 	umull	r2, r3, r3, r2
 8004f46:	095b      	lsrs	r3, r3, #5
 8004f48:	011c      	lsls	r4, r3, #4
 8004f4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f54:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004f58:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004f5c:	4642      	mov	r2, r8
 8004f5e:	464b      	mov	r3, r9
 8004f60:	1891      	adds	r1, r2, r2
 8004f62:	64b9      	str	r1, [r7, #72]	; 0x48
 8004f64:	415b      	adcs	r3, r3
 8004f66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004f6c:	4641      	mov	r1, r8
 8004f6e:	eb12 0a01 	adds.w	sl, r2, r1
 8004f72:	4649      	mov	r1, r9
 8004f74:	eb43 0b01 	adc.w	fp, r3, r1
 8004f78:	f04f 0200 	mov.w	r2, #0
 8004f7c:	f04f 0300 	mov.w	r3, #0
 8004f80:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f84:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f8c:	4692      	mov	sl, r2
 8004f8e:	469b      	mov	fp, r3
 8004f90:	4643      	mov	r3, r8
 8004f92:	eb1a 0303 	adds.w	r3, sl, r3
 8004f96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f9a:	464b      	mov	r3, r9
 8004f9c:	eb4b 0303 	adc.w	r3, fp, r3
 8004fa0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004fb0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004fb4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004fb8:	460b      	mov	r3, r1
 8004fba:	18db      	adds	r3, r3, r3
 8004fbc:	643b      	str	r3, [r7, #64]	; 0x40
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	eb42 0303 	adc.w	r3, r2, r3
 8004fc4:	647b      	str	r3, [r7, #68]	; 0x44
 8004fc6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004fca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004fce:	f7fb f919 	bl	8000204 <__aeabi_uldivmod>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	4611      	mov	r1, r2
 8004fd8:	4b3b      	ldr	r3, [pc, #236]	; (80050c8 <UART_SetConfig+0x2d4>)
 8004fda:	fba3 2301 	umull	r2, r3, r3, r1
 8004fde:	095b      	lsrs	r3, r3, #5
 8004fe0:	2264      	movs	r2, #100	; 0x64
 8004fe2:	fb02 f303 	mul.w	r3, r2, r3
 8004fe6:	1acb      	subs	r3, r1, r3
 8004fe8:	00db      	lsls	r3, r3, #3
 8004fea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004fee:	4b36      	ldr	r3, [pc, #216]	; (80050c8 <UART_SetConfig+0x2d4>)
 8004ff0:	fba3 2302 	umull	r2, r3, r3, r2
 8004ff4:	095b      	lsrs	r3, r3, #5
 8004ff6:	005b      	lsls	r3, r3, #1
 8004ff8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ffc:	441c      	add	r4, r3
 8004ffe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005002:	2200      	movs	r2, #0
 8005004:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005008:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800500c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005010:	4642      	mov	r2, r8
 8005012:	464b      	mov	r3, r9
 8005014:	1891      	adds	r1, r2, r2
 8005016:	63b9      	str	r1, [r7, #56]	; 0x38
 8005018:	415b      	adcs	r3, r3
 800501a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800501c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005020:	4641      	mov	r1, r8
 8005022:	1851      	adds	r1, r2, r1
 8005024:	6339      	str	r1, [r7, #48]	; 0x30
 8005026:	4649      	mov	r1, r9
 8005028:	414b      	adcs	r3, r1
 800502a:	637b      	str	r3, [r7, #52]	; 0x34
 800502c:	f04f 0200 	mov.w	r2, #0
 8005030:	f04f 0300 	mov.w	r3, #0
 8005034:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005038:	4659      	mov	r1, fp
 800503a:	00cb      	lsls	r3, r1, #3
 800503c:	4651      	mov	r1, sl
 800503e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005042:	4651      	mov	r1, sl
 8005044:	00ca      	lsls	r2, r1, #3
 8005046:	4610      	mov	r0, r2
 8005048:	4619      	mov	r1, r3
 800504a:	4603      	mov	r3, r0
 800504c:	4642      	mov	r2, r8
 800504e:	189b      	adds	r3, r3, r2
 8005050:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005054:	464b      	mov	r3, r9
 8005056:	460a      	mov	r2, r1
 8005058:	eb42 0303 	adc.w	r3, r2, r3
 800505c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800506c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005070:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005074:	460b      	mov	r3, r1
 8005076:	18db      	adds	r3, r3, r3
 8005078:	62bb      	str	r3, [r7, #40]	; 0x28
 800507a:	4613      	mov	r3, r2
 800507c:	eb42 0303 	adc.w	r3, r2, r3
 8005080:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005082:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005086:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800508a:	f7fb f8bb 	bl	8000204 <__aeabi_uldivmod>
 800508e:	4602      	mov	r2, r0
 8005090:	460b      	mov	r3, r1
 8005092:	4b0d      	ldr	r3, [pc, #52]	; (80050c8 <UART_SetConfig+0x2d4>)
 8005094:	fba3 1302 	umull	r1, r3, r3, r2
 8005098:	095b      	lsrs	r3, r3, #5
 800509a:	2164      	movs	r1, #100	; 0x64
 800509c:	fb01 f303 	mul.w	r3, r1, r3
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	00db      	lsls	r3, r3, #3
 80050a4:	3332      	adds	r3, #50	; 0x32
 80050a6:	4a08      	ldr	r2, [pc, #32]	; (80050c8 <UART_SetConfig+0x2d4>)
 80050a8:	fba2 2303 	umull	r2, r3, r2, r3
 80050ac:	095b      	lsrs	r3, r3, #5
 80050ae:	f003 0207 	and.w	r2, r3, #7
 80050b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4422      	add	r2, r4
 80050ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80050bc:	e106      	b.n	80052cc <UART_SetConfig+0x4d8>
 80050be:	bf00      	nop
 80050c0:	40011000 	.word	0x40011000
 80050c4:	40011400 	.word	0x40011400
 80050c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050d0:	2200      	movs	r2, #0
 80050d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80050d6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80050da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80050de:	4642      	mov	r2, r8
 80050e0:	464b      	mov	r3, r9
 80050e2:	1891      	adds	r1, r2, r2
 80050e4:	6239      	str	r1, [r7, #32]
 80050e6:	415b      	adcs	r3, r3
 80050e8:	627b      	str	r3, [r7, #36]	; 0x24
 80050ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050ee:	4641      	mov	r1, r8
 80050f0:	1854      	adds	r4, r2, r1
 80050f2:	4649      	mov	r1, r9
 80050f4:	eb43 0501 	adc.w	r5, r3, r1
 80050f8:	f04f 0200 	mov.w	r2, #0
 80050fc:	f04f 0300 	mov.w	r3, #0
 8005100:	00eb      	lsls	r3, r5, #3
 8005102:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005106:	00e2      	lsls	r2, r4, #3
 8005108:	4614      	mov	r4, r2
 800510a:	461d      	mov	r5, r3
 800510c:	4643      	mov	r3, r8
 800510e:	18e3      	adds	r3, r4, r3
 8005110:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005114:	464b      	mov	r3, r9
 8005116:	eb45 0303 	adc.w	r3, r5, r3
 800511a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800511e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800512a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800512e:	f04f 0200 	mov.w	r2, #0
 8005132:	f04f 0300 	mov.w	r3, #0
 8005136:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800513a:	4629      	mov	r1, r5
 800513c:	008b      	lsls	r3, r1, #2
 800513e:	4621      	mov	r1, r4
 8005140:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005144:	4621      	mov	r1, r4
 8005146:	008a      	lsls	r2, r1, #2
 8005148:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800514c:	f7fb f85a 	bl	8000204 <__aeabi_uldivmod>
 8005150:	4602      	mov	r2, r0
 8005152:	460b      	mov	r3, r1
 8005154:	4b60      	ldr	r3, [pc, #384]	; (80052d8 <UART_SetConfig+0x4e4>)
 8005156:	fba3 2302 	umull	r2, r3, r3, r2
 800515a:	095b      	lsrs	r3, r3, #5
 800515c:	011c      	lsls	r4, r3, #4
 800515e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005162:	2200      	movs	r2, #0
 8005164:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005168:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800516c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005170:	4642      	mov	r2, r8
 8005172:	464b      	mov	r3, r9
 8005174:	1891      	adds	r1, r2, r2
 8005176:	61b9      	str	r1, [r7, #24]
 8005178:	415b      	adcs	r3, r3
 800517a:	61fb      	str	r3, [r7, #28]
 800517c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005180:	4641      	mov	r1, r8
 8005182:	1851      	adds	r1, r2, r1
 8005184:	6139      	str	r1, [r7, #16]
 8005186:	4649      	mov	r1, r9
 8005188:	414b      	adcs	r3, r1
 800518a:	617b      	str	r3, [r7, #20]
 800518c:	f04f 0200 	mov.w	r2, #0
 8005190:	f04f 0300 	mov.w	r3, #0
 8005194:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005198:	4659      	mov	r1, fp
 800519a:	00cb      	lsls	r3, r1, #3
 800519c:	4651      	mov	r1, sl
 800519e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051a2:	4651      	mov	r1, sl
 80051a4:	00ca      	lsls	r2, r1, #3
 80051a6:	4610      	mov	r0, r2
 80051a8:	4619      	mov	r1, r3
 80051aa:	4603      	mov	r3, r0
 80051ac:	4642      	mov	r2, r8
 80051ae:	189b      	adds	r3, r3, r2
 80051b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80051b4:	464b      	mov	r3, r9
 80051b6:	460a      	mov	r2, r1
 80051b8:	eb42 0303 	adc.w	r3, r2, r3
 80051bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80051c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80051ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 80051cc:	f04f 0200 	mov.w	r2, #0
 80051d0:	f04f 0300 	mov.w	r3, #0
 80051d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80051d8:	4649      	mov	r1, r9
 80051da:	008b      	lsls	r3, r1, #2
 80051dc:	4641      	mov	r1, r8
 80051de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051e2:	4641      	mov	r1, r8
 80051e4:	008a      	lsls	r2, r1, #2
 80051e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80051ea:	f7fb f80b 	bl	8000204 <__aeabi_uldivmod>
 80051ee:	4602      	mov	r2, r0
 80051f0:	460b      	mov	r3, r1
 80051f2:	4611      	mov	r1, r2
 80051f4:	4b38      	ldr	r3, [pc, #224]	; (80052d8 <UART_SetConfig+0x4e4>)
 80051f6:	fba3 2301 	umull	r2, r3, r3, r1
 80051fa:	095b      	lsrs	r3, r3, #5
 80051fc:	2264      	movs	r2, #100	; 0x64
 80051fe:	fb02 f303 	mul.w	r3, r2, r3
 8005202:	1acb      	subs	r3, r1, r3
 8005204:	011b      	lsls	r3, r3, #4
 8005206:	3332      	adds	r3, #50	; 0x32
 8005208:	4a33      	ldr	r2, [pc, #204]	; (80052d8 <UART_SetConfig+0x4e4>)
 800520a:	fba2 2303 	umull	r2, r3, r2, r3
 800520e:	095b      	lsrs	r3, r3, #5
 8005210:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005214:	441c      	add	r4, r3
 8005216:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800521a:	2200      	movs	r2, #0
 800521c:	673b      	str	r3, [r7, #112]	; 0x70
 800521e:	677a      	str	r2, [r7, #116]	; 0x74
 8005220:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005224:	4642      	mov	r2, r8
 8005226:	464b      	mov	r3, r9
 8005228:	1891      	adds	r1, r2, r2
 800522a:	60b9      	str	r1, [r7, #8]
 800522c:	415b      	adcs	r3, r3
 800522e:	60fb      	str	r3, [r7, #12]
 8005230:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005234:	4641      	mov	r1, r8
 8005236:	1851      	adds	r1, r2, r1
 8005238:	6039      	str	r1, [r7, #0]
 800523a:	4649      	mov	r1, r9
 800523c:	414b      	adcs	r3, r1
 800523e:	607b      	str	r3, [r7, #4]
 8005240:	f04f 0200 	mov.w	r2, #0
 8005244:	f04f 0300 	mov.w	r3, #0
 8005248:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800524c:	4659      	mov	r1, fp
 800524e:	00cb      	lsls	r3, r1, #3
 8005250:	4651      	mov	r1, sl
 8005252:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005256:	4651      	mov	r1, sl
 8005258:	00ca      	lsls	r2, r1, #3
 800525a:	4610      	mov	r0, r2
 800525c:	4619      	mov	r1, r3
 800525e:	4603      	mov	r3, r0
 8005260:	4642      	mov	r2, r8
 8005262:	189b      	adds	r3, r3, r2
 8005264:	66bb      	str	r3, [r7, #104]	; 0x68
 8005266:	464b      	mov	r3, r9
 8005268:	460a      	mov	r2, r1
 800526a:	eb42 0303 	adc.w	r3, r2, r3
 800526e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	663b      	str	r3, [r7, #96]	; 0x60
 800527a:	667a      	str	r2, [r7, #100]	; 0x64
 800527c:	f04f 0200 	mov.w	r2, #0
 8005280:	f04f 0300 	mov.w	r3, #0
 8005284:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005288:	4649      	mov	r1, r9
 800528a:	008b      	lsls	r3, r1, #2
 800528c:	4641      	mov	r1, r8
 800528e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005292:	4641      	mov	r1, r8
 8005294:	008a      	lsls	r2, r1, #2
 8005296:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800529a:	f7fa ffb3 	bl	8000204 <__aeabi_uldivmod>
 800529e:	4602      	mov	r2, r0
 80052a0:	460b      	mov	r3, r1
 80052a2:	4b0d      	ldr	r3, [pc, #52]	; (80052d8 <UART_SetConfig+0x4e4>)
 80052a4:	fba3 1302 	umull	r1, r3, r3, r2
 80052a8:	095b      	lsrs	r3, r3, #5
 80052aa:	2164      	movs	r1, #100	; 0x64
 80052ac:	fb01 f303 	mul.w	r3, r1, r3
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	011b      	lsls	r3, r3, #4
 80052b4:	3332      	adds	r3, #50	; 0x32
 80052b6:	4a08      	ldr	r2, [pc, #32]	; (80052d8 <UART_SetConfig+0x4e4>)
 80052b8:	fba2 2303 	umull	r2, r3, r2, r3
 80052bc:	095b      	lsrs	r3, r3, #5
 80052be:	f003 020f 	and.w	r2, r3, #15
 80052c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4422      	add	r2, r4
 80052ca:	609a      	str	r2, [r3, #8]
}
 80052cc:	bf00      	nop
 80052ce:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80052d2:	46bd      	mov	sp, r7
 80052d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052d8:	51eb851f 	.word	0x51eb851f

080052dc <memset>:
 80052dc:	4402      	add	r2, r0
 80052de:	4603      	mov	r3, r0
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d100      	bne.n	80052e6 <memset+0xa>
 80052e4:	4770      	bx	lr
 80052e6:	f803 1b01 	strb.w	r1, [r3], #1
 80052ea:	e7f9      	b.n	80052e0 <memset+0x4>

080052ec <__libc_init_array>:
 80052ec:	b570      	push	{r4, r5, r6, lr}
 80052ee:	4d0d      	ldr	r5, [pc, #52]	; (8005324 <__libc_init_array+0x38>)
 80052f0:	4c0d      	ldr	r4, [pc, #52]	; (8005328 <__libc_init_array+0x3c>)
 80052f2:	1b64      	subs	r4, r4, r5
 80052f4:	10a4      	asrs	r4, r4, #2
 80052f6:	2600      	movs	r6, #0
 80052f8:	42a6      	cmp	r6, r4
 80052fa:	d109      	bne.n	8005310 <__libc_init_array+0x24>
 80052fc:	4d0b      	ldr	r5, [pc, #44]	; (800532c <__libc_init_array+0x40>)
 80052fe:	4c0c      	ldr	r4, [pc, #48]	; (8005330 <__libc_init_array+0x44>)
 8005300:	f000 f818 	bl	8005334 <_init>
 8005304:	1b64      	subs	r4, r4, r5
 8005306:	10a4      	asrs	r4, r4, #2
 8005308:	2600      	movs	r6, #0
 800530a:	42a6      	cmp	r6, r4
 800530c:	d105      	bne.n	800531a <__libc_init_array+0x2e>
 800530e:	bd70      	pop	{r4, r5, r6, pc}
 8005310:	f855 3b04 	ldr.w	r3, [r5], #4
 8005314:	4798      	blx	r3
 8005316:	3601      	adds	r6, #1
 8005318:	e7ee      	b.n	80052f8 <__libc_init_array+0xc>
 800531a:	f855 3b04 	ldr.w	r3, [r5], #4
 800531e:	4798      	blx	r3
 8005320:	3601      	adds	r6, #1
 8005322:	e7f2      	b.n	800530a <__libc_init_array+0x1e>
 8005324:	08005424 	.word	0x08005424
 8005328:	08005424 	.word	0x08005424
 800532c:	08005424 	.word	0x08005424
 8005330:	08005428 	.word	0x08005428

08005334 <_init>:
 8005334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005336:	bf00      	nop
 8005338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800533a:	bc08      	pop	{r3}
 800533c:	469e      	mov	lr, r3
 800533e:	4770      	bx	lr

08005340 <_fini>:
 8005340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005342:	bf00      	nop
 8005344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005346:	bc08      	pop	{r3}
 8005348:	469e      	mov	lr, r3
 800534a:	4770      	bx	lr
